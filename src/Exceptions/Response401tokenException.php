<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Exceptions;

use FortisAPILib\ApiHelper;

class Response401tokenException extends ApiException
{
    /**
     * @var int|null
     */
    private $statusCode;

    /**
     * @var string|null
     */
    private $error;

    /**
     * @var string|null
     */
    private $messageProperty;

    /**
     * Returns Status Code.
     * Response code
     */
    public function getStatusCode(): ?int
    {
        return $this->statusCode;
    }

    /**
     * Sets Status Code.
     * Response code
     *
     * @maps statusCode
     */
    public function setStatusCode(?int $statusCode): void
    {
        $this->statusCode = $statusCode;
    }

    /**
     * Returns Error.
     * Unauthorized
     */
    public function getError(): ?string
    {
        return $this->error;
    }

    /**
     * Sets Error.
     * Unauthorized
     *
     * @maps error
     */
    public function setError(?string $error): void
    {
        $this->error = $error;
    }

    /**
     * Returns Message Property.
     * Invalid token
     */
    public function getMessageProperty(): ?string
    {
        return $this->messageProperty;
    }

    /**
     * Sets Message Property.
     * Invalid token
     *
     * @maps message
     */
    public function setMessageProperty(?string $messageProperty): void
    {
        $this->messageProperty = $messageProperty;
    }

    /**
     * Converts the Response401tokenException object to a human-readable string representation.
     *
     * @return string The string representation of the Response401tokenException object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'Response401tokenException',
            [
                'statusCode' => $this->statusCode,
                'error' => $this->error,
                'messageProperty' => $this->messageProperty,
                'additionalProperties' => $this->additionalProperties
            ],
            parent::__toString()
        );
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }
}

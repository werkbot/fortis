<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Controllers;

use Core\Authentication\Auth;
use Core\Request\Parameters\BodyParam;
use Core\Request\Parameters\HeaderParam;
use Core\Request\Parameters\QueryParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use FortisAPILib\Exceptions\ApiException;
use FortisAPILib\Exceptions\Response401tokenException;
use FortisAPILib\Exceptions\Response412Exception;
use FortisAPILib\Models\Expand60Enum;
use FortisAPILib\Models\ResponseTransaction;
use FortisAPILib\Models\V1TransactionsEbtVoucherClearRefundKeyedRequest;
use FortisAPILib\Models\V1TransactionsEbtVoucherClearSaleKeyedRequest;

class TransactionsEBTCardController extends BaseController
{
    /**
     * Create a new keyed EBT voucher clear refund transaction
     *
     * @param V1TransactionsEbtVoucherClearRefundKeyedRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTransaction Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function eBTVoucherClearRefund(
        V1TransactionsEbtVoucherClearRefundKeyedRequest $body,
        ?array $expand = null
    ): ResponseTransaction {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::POST,
            '/v1/transactions/ebt/voucher-clear-refund/keyed'
        )
            ->auth(Auth::and('user-id', 'user-api-key', 'developer-id'))
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand60Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseTransaction::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }

    /**
     * Create a new keyed EBT voucher clear sale transaction
     *
     * @param V1TransactionsEbtVoucherClearSaleKeyedRequest $body
     * @param string[]|null $expand Most endpoints in the API have a way to retrieve extra data
     *        related to the current record being retrieved. For example, if the API request is
     *        for the accountvaults endpoint, and the end user also needs to know which contact
     *        the token belongs to, this data can be returned in the accountvaults endpoint
     *        request.
     *
     * @return ResponseTransaction Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function eBTVoucherClearSale(
        V1TransactionsEbtVoucherClearSaleKeyedRequest $body,
        ?array $expand = null
    ): ResponseTransaction {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/v1/transactions/ebt/voucher-clear-sale/keyed')
            ->auth(Auth::and('user-id', 'user-api-key', 'developer-id'))
            ->parameters(
                HeaderParam::init('Content-Type', 'application/json'),
                BodyParam::init($body),
                QueryParam::init('expand', $expand)->serializeBy([Expand60Enum::class, 'checkValue'])
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->throwErrorOn('412', ErrorType::init('Precondition Failed', Response412Exception::class))
            ->type(ResponseTransaction::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}

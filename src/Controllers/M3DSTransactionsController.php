<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Controllers;

use Core\Authentication\Auth;
use Core\Request\Parameters\QueryParam;
use Core\Request\Parameters\TemplateParam;
use Core\Response\Types\ErrorType;
use CoreInterfaces\Core\Request\RequestMethod;
use FortisAPILib\Exceptions\ApiException;
use FortisAPILib\Exceptions\Response401tokenException;
use FortisAPILib\Models\ResponseThreeDSTransaction;

class M3DSTransactionsController extends BaseController
{
    /**
     * For getting results of successful 3DS authentication attempts
     *
     * @param string $threeDsServerTransId Universally unique transaction identifier assigned by the
     *        3DS Server to identify a single transaction.
     * @param string $productTransactionId Product Transaction ID associated with this 3DS request
     *
     * @return ResponseThreeDSTransaction Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function m3DSTransactionsRequest(
        string $threeDsServerTransId,
        string $productTransactionId
    ): ResponseThreeDSTransaction {
        $_reqBuilder = $this->requestBuilder(
            RequestMethod::GET,
            '/v1/merchant/threedsecure/transactions/{three_ds_server_trans_id}'
        )
            ->auth(Auth::and('user-id', 'user-api-key', 'developer-id'))
            ->parameters(
                TemplateParam::init('three_ds_server_trans_id', $threeDsServerTransId),
                QueryParam::init('product_transaction_id', $productTransactionId)
            );

        $_resHandler = $this->responseHandler()
            ->throwErrorOn('401', ErrorType::init('Unauthorized', Response401tokenException::class))
            ->type(ResponseThreeDSTransaction::class);

        return $this->execute($_reqBuilder, $_resHandler);
    }
}

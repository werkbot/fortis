<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use FortisAPILib\ApiHelper;
use stdClass;

/**
 * Until EMV 3DS 2.2.0:
 *
 * Unstructured information sent between the 3DS Server, the DS and the ACS.
 *
 * This field is not required to be filled by the Requestor and the requirements for the presence of
 * this field are DS specific.
 *
 * Starting from EMV 3DS 2.3.1:
 *
 * Structured information sent between the 3DS Server, the DS and the ACS. 2.3.1 structure is defined
 * below. Accepted value length is maximum 4096 characters. This field is optional.
 */
class BroadInfo implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $category;

    /**
     * @var string|null
     */
    private $description;

    /**
     * @var string|null
     */
    private $expireDate;

    /**
     * @var string|null
     */
    private $severity;

    /**
     * @var string|null
     */
    private $recipients;

    /**
     * @var string|null
     */
    private $source;

    /**
     * Returns Category.
     * Indicates the category/type of information. This field is required.
     * >01 - General
     * >
     * >02 - Certificate expiry
     * >
     * >03 - Fraud alert
     * >
     * >04 - Operational alert
     * >
     * >05 - Transactional data
     * >
     * >06 - Other
     * >
     * >80 through 99 - PS-specific value (dependent on the payment scheme type)
     * >
     */
    public function getCategory(): ?string
    {
        return $this->category;
    }

    /**
     * Sets Category.
     * Indicates the category/type of information. This field is required.
     * >01 - General
     * >
     * >02 - Certificate expiry
     * >
     * >03 - Fraud alert
     * >
     * >04 - Operational alert
     * >
     * >05 - Transactional data
     * >
     * >06 - Other
     * >
     * >80 through 99 - PS-specific value (dependent on the payment scheme type)
     * >
     *
     * @maps category
     * @factory \FortisAPILib\Models\CategoryEnum::checkValue
     */
    public function setCategory(?string $category): void
    {
        $this->category = $category;
    }

    /**
     * Returns Description.
     * Information to be broadcasted to the recipients. Accepted value length is maximum 4000 characters.
     * This field is optional.
     */
    public function getDescription(): ?string
    {
        return $this->description;
    }

    /**
     * Sets Description.
     * Information to be broadcasted to the recipients. Accepted value length is maximum 4000 characters.
     * This field is optional.
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description = $description;
    }

    /**
     * Returns Expire Date.
     * The date after which the relevance of the broadcasted information (e.g., ceritifacte expiration
     * dates) expires. The accepted value length is 8 characters. The accepted format is YYYYMMDD.
     */
    public function getExpireDate(): ?string
    {
        return $this->expireDate;
    }

    /**
     * Sets Expire Date.
     * The date after which the relevance of the broadcasted information (e.g., ceritifacte expiration
     * dates) expires. The accepted value length is 8 characters. The accepted format is YYYYMMDD.
     *
     * @maps expire_date
     */
    public function setExpireDate(?string $expireDate): void
    {
        $this->expireDate = $expireDate;
    }

    /**
     * Returns Severity.
     * Indicates the importance/severity level of the broadcasted information. This field is required.
     * >01 - Critical. Immediate action to be taken by recipient
     * >
     * >02 - Major. Major impact; Upcoming action to be taken by recipient
     * >
     * >03 - Minor. Minor impact; Upcoming action to be taken by recipient
     * >
     * >04 - Informational. Informational only with no immediate action by recipient
     * >
     */
    public function getSeverity(): ?string
    {
        return $this->severity;
    }

    /**
     * Sets Severity.
     * Indicates the importance/severity level of the broadcasted information. This field is required.
     * >01 - Critical. Immediate action to be taken by recipient
     * >
     * >02 - Major. Major impact; Upcoming action to be taken by recipient
     * >
     * >03 - Minor. Minor impact; Upcoming action to be taken by recipient
     * >
     * >04 - Informational. Informational only with no immediate action by recipient
     * >
     *
     * @maps severity
     * @factory \FortisAPILib\Models\SeverityEnum::checkValue
     */
    public function setSeverity(?string $severity): void
    {
        $this->severity = $severity;
    }

    /**
     * Returns Recipients.
     * Indicates the intended recipient(s) of the broadcasted information. This field is required.
     * >01 - 3DS SDK
     * >
     * >02 - 3DS Server
     * >
     * >03 - DS
     * >
     * >04 - ACS
     * >
     */
    public function getRecipients(): ?string
    {
        return $this->recipients;
    }

    /**
     * Sets Recipients.
     * Indicates the intended recipient(s) of the broadcasted information. This field is required.
     * >01 - 3DS SDK
     * >
     * >02 - 3DS Server
     * >
     * >03 - DS
     * >
     * >04 - ACS
     * >
     *
     * @maps recipients
     * @factory \FortisAPILib\Models\RecipientsEnum::checkValue
     */
    public function setRecipients(?string $recipients): void
    {
        $this->recipients = $recipients;
    }

    /**
     * Returns Source.
     * Indicates the source of the broadcasted information. This field is required.
     * >01 - 3DS Server
     * >
     * >02 - DS
     * >
     * >03 - ACS
     * >
     */
    public function getSource(): ?string
    {
        return $this->source;
    }

    /**
     * Sets Source.
     * Indicates the source of the broadcasted information. This field is required.
     * >01 - 3DS Server
     * >
     * >02 - DS
     * >
     * >03 - ACS
     * >
     *
     * @maps source
     * @factory \FortisAPILib\Models\SourceEnum::checkValue
     */
    public function setSource(?string $source): void
    {
        $this->source = $source;
    }

    /**
     * Converts the BroadInfo object to a human-readable string representation.
     *
     * @return string The string representation of the BroadInfo object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'BroadInfo',
            [
                'category' => $this->category,
                'description' => $this->description,
                'expireDate' => $this->expireDate,
                'severity' => $this->severity,
                'recipients' => $this->recipients,
                'source' => $this->source,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->category)) {
            $json['category']    = CategoryEnum::checkValue($this->category);
        }
        if (isset($this->description)) {
            $json['description'] = $this->description;
        }
        if (isset($this->expireDate)) {
            $json['expire_date'] = $this->expireDate;
        }
        if (isset($this->severity)) {
            $json['severity']    = SeverityEnum::checkValue($this->severity);
        }
        if (isset($this->recipients)) {
            $json['recipients']  = RecipientsEnum::checkValue($this->recipients);
        }
        if (isset($this->source)) {
            $json['source']      = SourceEnum::checkValue($this->source);
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use FortisAPILib\ApiHelper;
use stdClass;

class ThreeDsRequestorPriorAuthenticationInfo implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $threeDsReqPriorRef;

    /**
     * @var string|null
     */
    private $threeDsReqPriorAuthMethod;

    /**
     * @var string|null
     */
    private $threeDsReqPriorAuthTimestamp;

    /**
     * @var string|null
     */
    private $threeDsReqPriorAuthData;

    /**
     * Returns Three Ds Req Prior Ref.
     * This data element provides additional information to the ACS to determine the best approach for
     * handling a request. The field is limited to 36 characters containing ACS Transaction ID for a prior
     * authenticated transaction (for example, the first recurring transaction that was authenticated with
     * the cardholder).
     */
    public function getThreeDsReqPriorRef(): ?string
    {
        return $this->threeDsReqPriorRef;
    }

    /**
     * Sets Three Ds Req Prior Ref.
     * This data element provides additional information to the ACS to determine the best approach for
     * handling a request. The field is limited to 36 characters containing ACS Transaction ID for a prior
     * authenticated transaction (for example, the first recurring transaction that was authenticated with
     * the cardholder).
     *
     * @maps three_ds_req_prior_ref
     */
    public function setThreeDsReqPriorRef(?string $threeDsReqPriorRef): void
    {
        $this->threeDsReqPriorRef = $threeDsReqPriorRef;
    }

    /**
     * Returns Three Ds Req Prior Auth Method.
     * Mechanism used by the Cardholder to previously authenticate to the 3DS Requestor.
     * >01 - Frictionless authentication occurred by ACS
     * >
     * >02 - Cardholder challenge occurred by ACS
     * >
     * >03 - AVS verified
     * >
     * >04 - Other issuer methods
     * >
     * >80 through 99 - PS-specific value (dependent on the payment scheme type).
     * >
     */
    public function getThreeDsReqPriorAuthMethod(): ?string
    {
        return $this->threeDsReqPriorAuthMethod;
    }

    /**
     * Sets Three Ds Req Prior Auth Method.
     * Mechanism used by the Cardholder to previously authenticate to the 3DS Requestor.
     * >01 - Frictionless authentication occurred by ACS
     * >
     * >02 - Cardholder challenge occurred by ACS
     * >
     * >03 - AVS verified
     * >
     * >04 - Other issuer methods
     * >
     * >80 through 99 - PS-specific value (dependent on the payment scheme type).
     * >
     *
     * @maps three_ds_req_prior_auth_method
     * @factory \FortisAPILib\Models\ThreeDsReqPriorAuthMethodEnum::checkValue
     */
    public function setThreeDsReqPriorAuthMethod(?string $threeDsReqPriorAuthMethod): void
    {
        $this->threeDsReqPriorAuthMethod = $threeDsReqPriorAuthMethod;
    }

    /**
     * Returns Three Ds Req Prior Auth Timestamp.
     * Date and time converted into UTC of the prior authentication. Accepted date format is YYYYMMDDHHMM.
     */
    public function getThreeDsReqPriorAuthTimestamp(): ?string
    {
        return $this->threeDsReqPriorAuthTimestamp;
    }

    /**
     * Sets Three Ds Req Prior Auth Timestamp.
     * Date and time converted into UTC of the prior authentication. Accepted date format is YYYYMMDDHHMM.
     *
     * @maps three_ds_req_prior_auth_timestamp
     */
    public function setThreeDsReqPriorAuthTimestamp(?string $threeDsReqPriorAuthTimestamp): void
    {
        $this->threeDsReqPriorAuthTimestamp = $threeDsReqPriorAuthTimestamp;
    }

    /**
     * Returns Three Ds Req Prior Auth Data.
     * Data that documents and supports a specific authentication process. In the current version of the
     * specification this data element is not defined in detail, however the intention is that for each 3DS
     * Requestor Authentication Method, this field carry data that the ACS can use to verify the
     * authentication process. In future versions of the application, these details are expected to be
     * included.
     */
    public function getThreeDsReqPriorAuthData(): ?string
    {
        return $this->threeDsReqPriorAuthData;
    }

    /**
     * Sets Three Ds Req Prior Auth Data.
     * Data that documents and supports a specific authentication process. In the current version of the
     * specification this data element is not defined in detail, however the intention is that for each 3DS
     * Requestor Authentication Method, this field carry data that the ACS can use to verify the
     * authentication process. In future versions of the application, these details are expected to be
     * included.
     *
     * @maps three_ds_req_prior_auth_data
     */
    public function setThreeDsReqPriorAuthData(?string $threeDsReqPriorAuthData): void
    {
        $this->threeDsReqPriorAuthData = $threeDsReqPriorAuthData;
    }

    /**
     * Converts the ThreeDsRequestorPriorAuthenticationInfo object to a human-readable string
     * representation.
     *
     * @return string The string representation of the ThreeDsRequestorPriorAuthenticationInfo object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'ThreeDsRequestorPriorAuthenticationInfo',
            [
                'threeDsReqPriorRef' => $this->threeDsReqPriorRef,
                'threeDsReqPriorAuthMethod' => $this->threeDsReqPriorAuthMethod,
                'threeDsReqPriorAuthTimestamp' => $this->threeDsReqPriorAuthTimestamp,
                'threeDsReqPriorAuthData' => $this->threeDsReqPriorAuthData,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->threeDsReqPriorRef)) {
            $json['three_ds_req_prior_ref']            = $this->threeDsReqPriorRef;
        }
        if (isset($this->threeDsReqPriorAuthMethod)) {
            $json['three_ds_req_prior_auth_method']    =
                ThreeDsReqPriorAuthMethodEnum::checkValue(
                    $this->threeDsReqPriorAuthMethod
                );
        }
        if (isset($this->threeDsReqPriorAuthTimestamp)) {
            $json['three_ds_req_prior_auth_timestamp'] = $this->threeDsReqPriorAuthTimestamp;
        }
        if (isset($this->threeDsReqPriorAuthData)) {
            $json['three_ds_req_prior_auth_data']      = $this->threeDsReqPriorAuthData;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

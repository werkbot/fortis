<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use FortisAPILib\ApiHelper;
use stdClass;

/**
 * Contains purchase information
 */
class MerchantRiskIndicator implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $shipIndicator;

    /**
     * @var string|null
     */
    private $deliveryTimeframe;

    /**
     * @var string|null
     */
    private $deliveryEmailAddress;

    /**
     * @var string|null
     */
    private $reorderItemsInd;

    /**
     * @var string|null
     */
    private $preOrderPurchaseInd;

    /**
     * @var string|null
     */
    private $preOrderDate;

    /**
     * @var int|null
     */
    private $giftCardAmount;

    /**
     * @var string|null
     */
    private $giftCardCurr;

    /**
     * @var int|null
     */
    private $giftCardCount;

    /**
     * @var string[]|null
     */
    private $transChar;

    /**
     * Returns Ship Indicator.
     * Indicates shipping method chosen for the transaction. Merchants must choose the Shipping Indicator
     * code that most accurately describes the cardholder's specific transaction. If one or more items are
     * included in the sale, use the Shipping Indicator code for the physical goods, or if all digital
     * goods, use the code that describes the most expensive item.
     * >01 - Ship to cardholder's billing address
     * >
     * >02 - Ship to another verified address on file with merchant
     * >
     * >03 - Ship to address that is different than the cardholder's billing address
     * >
     * >04 - "Ship to Store" / Pick-up at local store (Store address shall be populated in shipping address
     * fields)
     * >
     * >05 - Digital goods (includes online services, electronic gift cards and redemption codes)
     * >
     * >06 - Travel and Event tickets, not shipped
     * >
     * >07 - Other (for example, Gaming, digital services not shipped, e-media subscriptions, etc.)
     * >
     * >08 - Pick-up and go delivery. Availble in EMV 3DS 2.3.1 and later
     * >
     * >09 - Locker delivery (or other automated pick-up). Availble in EMV 3DS 2.3.1 and later
     * >
     * >80 - PS-specific value (dependent on the payment scheme type)
     * >
     * >81 - PS-specific value (dependent on the payment scheme type)
     * >
     */
    public function getShipIndicator(): ?string
    {
        return $this->shipIndicator;
    }

    /**
     * Sets Ship Indicator.
     * Indicates shipping method chosen for the transaction. Merchants must choose the Shipping Indicator
     * code that most accurately describes the cardholder's specific transaction. If one or more items are
     * included in the sale, use the Shipping Indicator code for the physical goods, or if all digital
     * goods, use the code that describes the most expensive item.
     * >01 - Ship to cardholder's billing address
     * >
     * >02 - Ship to another verified address on file with merchant
     * >
     * >03 - Ship to address that is different than the cardholder's billing address
     * >
     * >04 - "Ship to Store" / Pick-up at local store (Store address shall be populated in shipping address
     * fields)
     * >
     * >05 - Digital goods (includes online services, electronic gift cards and redemption codes)
     * >
     * >06 - Travel and Event tickets, not shipped
     * >
     * >07 - Other (for example, Gaming, digital services not shipped, e-media subscriptions, etc.)
     * >
     * >08 - Pick-up and go delivery. Availble in EMV 3DS 2.3.1 and later
     * >
     * >09 - Locker delivery (or other automated pick-up). Availble in EMV 3DS 2.3.1 and later
     * >
     * >80 - PS-specific value (dependent on the payment scheme type)
     * >
     * >81 - PS-specific value (dependent on the payment scheme type)
     * >
     *
     * @maps ship_indicator
     * @factory \FortisAPILib\Models\ShipIndicatorEnum::checkValue
     */
    public function setShipIndicator(?string $shipIndicator): void
    {
        $this->shipIndicator = $shipIndicator;
    }

    /**
     * Returns Delivery Timeframe.
     * Indicates the merchandise delivery timeframe.
     * >01 - Electronic Delivery
     * >
     * >02 - Same day shipping
     * >
     * >03 - Overnight shipping
     * >
     * >04 - Two-day or more shipping
     * >
     */
    public function getDeliveryTimeframe(): ?string
    {
        return $this->deliveryTimeframe;
    }

    /**
     * Sets Delivery Timeframe.
     * Indicates the merchandise delivery timeframe.
     * >01 - Electronic Delivery
     * >
     * >02 - Same day shipping
     * >
     * >03 - Overnight shipping
     * >
     * >04 - Two-day or more shipping
     * >
     *
     * @maps delivery_timeframe
     * @factory \FortisAPILib\Models\DeliveryTimeframeEnum::checkValue
     */
    public function setDeliveryTimeframe(?string $deliveryTimeframe): void
    {
        $this->deliveryTimeframe = $deliveryTimeframe;
    }

    /**
     * Returns Delivery Email Address.
     * For electronic delivery, the email address to which the merchandise was delivered.
     */
    public function getDeliveryEmailAddress(): ?string
    {
        return $this->deliveryEmailAddress;
    }

    /**
     * Sets Delivery Email Address.
     * For electronic delivery, the email address to which the merchandise was delivered.
     *
     * @maps delivery_email_address
     */
    public function setDeliveryEmailAddress(?string $deliveryEmailAddress): void
    {
        $this->deliveryEmailAddress = $deliveryEmailAddress;
    }

    /**
     * Returns Reorder Items Ind.
     * Indicates whether the cardholder is reordering previously purchased merchandise.
     * >01 - First time ordered
     * >
     * >02 - Reordered
     * >
     */
    public function getReorderItemsInd(): ?string
    {
        return $this->reorderItemsInd;
    }

    /**
     * Sets Reorder Items Ind.
     * Indicates whether the cardholder is reordering previously purchased merchandise.
     * >01 - First time ordered
     * >
     * >02 - Reordered
     * >
     *
     * @maps reorder_items_ind
     * @factory \FortisAPILib\Models\ReorderItemsIndEnum::checkValue
     */
    public function setReorderItemsInd(?string $reorderItemsInd): void
    {
        $this->reorderItemsInd = $reorderItemsInd;
    }

    /**
     * Returns Pre Order Purchase Ind.
     * Indicates whether Cardholder is placing an order for merchandise with a future availability or
     * release date.
     * >01 - Merchandise available
     * >
     * >02 - Future availability
     * >
     */
    public function getPreOrderPurchaseInd(): ?string
    {
        return $this->preOrderPurchaseInd;
    }

    /**
     * Sets Pre Order Purchase Ind.
     * Indicates whether Cardholder is placing an order for merchandise with a future availability or
     * release date.
     * >01 - Merchandise available
     * >
     * >02 - Future availability
     * >
     *
     * @maps pre_order_purchase_ind
     * @factory \FortisAPILib\Models\PreOrderPurchaseIndEnum::checkValue
     */
    public function setPreOrderPurchaseInd(?string $preOrderPurchaseInd): void
    {
        $this->preOrderPurchaseInd = $preOrderPurchaseInd;
    }

    /**
     * Returns Pre Order Date.
     * For a pre-ordered purchase, the expected date that the merchandise will be available. Date format
     * must be YYYYMMDD.
     */
    public function getPreOrderDate(): ?string
    {
        return $this->preOrderDate;
    }

    /**
     * Sets Pre Order Date.
     * For a pre-ordered purchase, the expected date that the merchandise will be available. Date format
     * must be YYYYMMDD.
     *
     * @maps pre_order_date
     */
    public function setPreOrderDate(?string $preOrderDate): void
    {
        $this->preOrderDate = $preOrderDate;
    }

    /**
     * Returns Gift Card Amount.
     * For prepaid or gift card purchase, the purchase amount total of prepaid or gift card(s) in major
     * units (for example, USD 123.45 is 123).
     */
    public function getGiftCardAmount(): ?int
    {
        return $this->giftCardAmount;
    }

    /**
     * Sets Gift Card Amount.
     * For prepaid or gift card purchase, the purchase amount total of prepaid or gift card(s) in major
     * units (for example, USD 123.45 is 123).
     *
     * @maps gift_card_amount
     */
    public function setGiftCardAmount(?int $giftCardAmount): void
    {
        $this->giftCardAmount = $giftCardAmount;
    }

    /**
     * Returns Gift Card Curr.
     * For prepaid or gift card purchase, the currency code of the card as defined in ISO 4217 except 955 -
     * 964 and 999.
     */
    public function getGiftCardCurr(): ?string
    {
        return $this->giftCardCurr;
    }

    /**
     * Sets Gift Card Curr.
     * For prepaid or gift card purchase, the currency code of the card as defined in ISO 4217 except 955 -
     * 964 and 999.
     *
     * @maps gift_card_curr
     */
    public function setGiftCardCurr(?string $giftCardCurr): void
    {
        $this->giftCardCurr = $giftCardCurr;
    }

    /**
     * Returns Gift Card Count.
     * For prepaid or gift card purchase, total count of individual prepaid or gift cards/codes purchased.
     */
    public function getGiftCardCount(): ?int
    {
        return $this->giftCardCount;
    }

    /**
     * Sets Gift Card Count.
     * For prepaid or gift card purchase, total count of individual prepaid or gift cards/codes purchased.
     *
     * @maps gift_card_count
     */
    public function setGiftCardCount(?int $giftCardCount): void
    {
        $this->giftCardCount = $giftCardCount;
    }

    /**
     * Returns Trans Char.
     * Available starting in EMV 3DS 2.3.1.1.  Indicates to the ACS specific transactions identified by the
     * Merchant.
     * >01 - Cryptocurrency transaction
     * >
     * >02 - NFT transaction
     * >
     *
     * @return string[]|null
     */
    public function getTransChar(): ?array
    {
        return $this->transChar;
    }

    /**
     * Sets Trans Char.
     * Available starting in EMV 3DS 2.3.1.1.  Indicates to the ACS specific transactions identified by the
     * Merchant.
     * >01 - Cryptocurrency transaction
     * >
     * >02 - NFT transaction
     * >
     *
     * @maps trans_char
     * @factory \FortisAPILib\Models\TransCharEnum::checkValue
     *
     * @param string[]|null $transChar
     */
    public function setTransChar(?array $transChar): void
    {
        $this->transChar = $transChar;
    }

    /**
     * Converts the MerchantRiskIndicator object to a human-readable string representation.
     *
     * @return string The string representation of the MerchantRiskIndicator object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'MerchantRiskIndicator',
            [
                'shipIndicator' => $this->shipIndicator,
                'deliveryTimeframe' => $this->deliveryTimeframe,
                'deliveryEmailAddress' => $this->deliveryEmailAddress,
                'reorderItemsInd' => $this->reorderItemsInd,
                'preOrderPurchaseInd' => $this->preOrderPurchaseInd,
                'preOrderDate' => $this->preOrderDate,
                'giftCardAmount' => $this->giftCardAmount,
                'giftCardCurr' => $this->giftCardCurr,
                'giftCardCount' => $this->giftCardCount,
                'transChar' => $this->transChar,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->shipIndicator)) {
            $json['ship_indicator']         = ShipIndicatorEnum::checkValue($this->shipIndicator);
        }
        if (isset($this->deliveryTimeframe)) {
            $json['delivery_timeframe']     = DeliveryTimeframeEnum::checkValue($this->deliveryTimeframe);
        }
        if (isset($this->deliveryEmailAddress)) {
            $json['delivery_email_address'] = $this->deliveryEmailAddress;
        }
        if (isset($this->reorderItemsInd)) {
            $json['reorder_items_ind']      = ReorderItemsIndEnum::checkValue($this->reorderItemsInd);
        }
        if (isset($this->preOrderPurchaseInd)) {
            $json['pre_order_purchase_ind'] = PreOrderPurchaseIndEnum::checkValue($this->preOrderPurchaseInd);
        }
        if (isset($this->preOrderDate)) {
            $json['pre_order_date']         = $this->preOrderDate;
        }
        if (isset($this->giftCardAmount)) {
            $json['gift_card_amount']       = $this->giftCardAmount;
        }
        if (isset($this->giftCardCurr)) {
            $json['gift_card_curr']         = $this->giftCardCurr;
        }
        if (isset($this->giftCardCount)) {
            $json['gift_card_count']        = $this->giftCardCount;
        }
        if (isset($this->transChar)) {
            $json['trans_char']             = TransCharEnum::checkValue($this->transChar);
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

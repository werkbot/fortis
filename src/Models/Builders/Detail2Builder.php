<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models\Builders;

use Core\Utils\CoreHelper;
use FortisAPILib\Models\Detail2;

/**
 * Builder for model Detail2
 *
 * @see Detail2
 */
class Detail2Builder
{
    /**
     * @var Detail2
     */
    private $instance;

    private function __construct(Detail2 $instance)
    {
        $this->instance = $instance;
    }

    /**
     * Initializes a new Detail 2 Builder object.
     */
    public static function init(): self
    {
        return new self(new Detail2());
    }

    /**
     * Sets processor batch number field.
     *
     * @param string|null $value
     */
    public function processorBatchNumber(?string $value): self
    {
        $this->instance->setProcessorBatchNumber($value);
        return $this;
    }

    /**
     * Unsets processor batch number field.
     */
    public function unsetProcessorBatchNumber(): self
    {
        $this->instance->unsetProcessorBatchNumber();
        return $this;
    }

    /**
     * Sets product code field.
     *
     * @param string|null $value
     */
    public function productCode(?string $value): self
    {
        $this->instance->setProductCode($value);
        return $this;
    }

    /**
     * Unsets product code field.
     */
    public function unsetProductCode(): self
    {
        $this->instance->unsetProductCode();
        return $this;
    }

    /**
     * Sets deposit detail type field.
     *
     * @param string|null $value
     */
    public function depositDetailType(?string $value): self
    {
        $this->instance->setDepositDetailType($value);
        return $this;
    }

    /**
     * Unsets deposit detail type field.
     */
    public function unsetDepositDetailType(): self
    {
        $this->instance->unsetDepositDetailType();
        return $this;
    }

    /**
     * Sets amount field.
     *
     * @param float|null $value
     */
    public function amount(?float $value): self
    {
        $this->instance->setAmount($value);
        return $this;
    }

    /**
     * Sets memo field.
     *
     * @param string|null $value
     */
    public function memo(?string $value): self
    {
        $this->instance->setMemo($value);
        return $this;
    }

    /**
     * Unsets memo field.
     */
    public function unsetMemo(): self
    {
        $this->instance->unsetMemo();
        return $this;
    }

    /**
     * Sets reported date field.
     *
     * @param string|null $value
     */
    public function reportedDate(?string $value): self
    {
        $this->instance->setReportedDate($value);
        return $this;
    }

    /**
     * Unsets reported date field.
     */
    public function unsetReportedDate(): self
    {
        $this->instance->unsetReportedDate();
        return $this;
    }

    /**
     * Sets settled date field.
     *
     * @param string|null $value
     */
    public function settledDate(?string $value): self
    {
        $this->instance->setSettledDate($value);
        return $this;
    }

    /**
     * Unsets settled date field.
     */
    public function unsetSettledDate(): self
    {
        $this->instance->unsetSettledDate();
        return $this;
    }

    /**
     * Sets mid field.
     *
     * @param string|null $value
     */
    public function mid(?string $value): self
    {
        $this->instance->setMid($value);
        return $this;
    }

    /**
     * Unsets mid field.
     */
    public function unsetMid(): self
    {
        $this->instance->unsetMid();
        return $this;
    }

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function additionalProperty(string $name, $value): self
    {
        $this->instance->addAdditionalProperty($name, $value);
        return $this;
    }

    /**
     * Initializes a new Detail 2 object.
     */
    public function build(): Detail2
    {
        return CoreHelper::clone($this->instance);
    }
}

<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use FortisAPILib\ApiHelper;
use stdClass;

class V1MerchantThreedsecureAuthenticationRequest implements \JsonSerializable
{
    /**
     * @var string
     */
    private $productTransactionId;

    /**
     * @var array
     */
    private $preferredProtocolVersion = [];

    /**
     * @var bool|null
     */
    private $enforcePreferredProtocolVersion;

    /**
     * @var string
     */
    private $deviceChannel;

    /**
     * @var string
     */
    private $messageCategory;

    /**
     * @var array
     */
    private $threeDsCompInd = [];

    /**
     * @var array
     */
    private $threeDsMethodId = [];

    /**
     * @var ThreeDsRequestor
     */
    private $threeDsRequestor;

    /**
     * @var array
     */
    private $threeDsServerTransId = [];

    /**
     * @var array
     */
    private $threeDsRequestorUrl = [];

    /**
     * @var CardholderAccount
     */
    private $cardholderAccount;

    /**
     * @var Cardholder|null
     */
    private $cardholder;

    /**
     * @var Purchase|null
     */
    private $purchase;

    /**
     * @var BroadInfo|null
     */
    private $broadInfo;

    /**
     * @var MessageExtension[]|null
     */
    private $messageExtension;

    /**
     * @var ChallengeMessageExtension[]|null
     */
    private $challengeMessageExtension;

    /**
     * @var BrowserInformation|null
     */
    private $browserInformation;

    /**
     * @var array
     */
    private $threeRiInd = [];

    /**
     * @var Device|null
     */
    private $device;

    /**
     * @var MultiTransaction|null
     */
    private $multiTransaction;

    /**
     * @var array
     */
    private $deviceId = [];

    /**
     * @var array
     */
    private $userId = [];

    /**
     * @var array
     */
    private $payeeOrigin = [];

    /**
     * @param string $productTransactionId
     * @param string $deviceChannel
     * @param string $messageCategory
     * @param ThreeDsRequestor $threeDsRequestor
     * @param CardholderAccount $cardholderAccount
     */
    public function __construct(
        string $productTransactionId,
        string $deviceChannel,
        string $messageCategory,
        ThreeDsRequestor $threeDsRequestor,
        CardholderAccount $cardholderAccount
    ) {
        $this->productTransactionId = $productTransactionId;
        $this->deviceChannel = $deviceChannel;
        $this->messageCategory = $messageCategory;
        $this->threeDsRequestor = $threeDsRequestor;
        $this->cardholderAccount = $cardholderAccount;
    }

    /**
     * Returns Product Transaction Id.
     * Product Transaction ID to associate with this 3DS request
     */
    public function getProductTransactionId(): string
    {
        return $this->productTransactionId;
    }

    /**
     * Sets Product Transaction Id.
     * Product Transaction ID to associate with this 3DS request
     *
     * @required
     * @maps product_transaction_id
     */
    public function setProductTransactionId(string $productTransactionId): void
    {
        $this->productTransactionId = $productTransactionId;
    }

    /**
     * Returns Preferred Protocol Version.
     * Specifies the preferred version of 3D Secure protocol to be utilized while executing 3D Secure
     * authentication. 3DS Server initiates an authentication request with the preferred version and if
     * this version is not supported by other 3D Secure components, it falls back to the next supported
     * version(s) and continues authentication.
     * If the preferred version is enforced by setting  #enforcePreferredProtocolVersion flag, but this
     * version is not supported by one of the 3D Secure components, 3DS Server does not initiate an
     * authentication and provides corresponding error message to the customer.
     * If no value is provided, EMV 3DS 2.1.0 version will be used by default.
     * >2.1.0 - prefer authentication with 2.1.0 version
     * >
     * >2.2.0 - prefer authentication with 2.2.0 version
     * >
     * >2.3.1 - prefer authentication with 2.3.1 version
     * >
     */
    public function getPreferredProtocolVersion(): ?string
    {
        if (count($this->preferredProtocolVersion) == 0) {
            return null;
        }
        return $this->preferredProtocolVersion['value'];
    }

    /**
     * Sets Preferred Protocol Version.
     * Specifies the preferred version of 3D Secure protocol to be utilized while executing 3D Secure
     * authentication. 3DS Server initiates an authentication request with the preferred version and if
     * this version is not supported by other 3D Secure components, it falls back to the next supported
     * version(s) and continues authentication.
     * If the preferred version is enforced by setting  #enforcePreferredProtocolVersion flag, but this
     * version is not supported by one of the 3D Secure components, 3DS Server does not initiate an
     * authentication and provides corresponding error message to the customer.
     * If no value is provided, EMV 3DS 2.1.0 version will be used by default.
     * >2.1.0 - prefer authentication with 2.1.0 version
     * >
     * >2.2.0 - prefer authentication with 2.2.0 version
     * >
     * >2.3.1 - prefer authentication with 2.3.1 version
     * >
     *
     * @maps preferred_protocol_version
     * @factory \FortisAPILib\Models\PreferredProtocolVersionEnum::checkValue
     */
    public function setPreferredProtocolVersion(?string $preferredProtocolVersion): void
    {
        $this->preferredProtocolVersion['value'] = $preferredProtocolVersion;
    }

    /**
     * Unsets Preferred Protocol Version.
     * Specifies the preferred version of 3D Secure protocol to be utilized while executing 3D Secure
     * authentication. 3DS Server initiates an authentication request with the preferred version and if
     * this version is not supported by other 3D Secure components, it falls back to the next supported
     * version(s) and continues authentication.
     * If the preferred version is enforced by setting  #enforcePreferredProtocolVersion flag, but this
     * version is not supported by one of the 3D Secure components, 3DS Server does not initiate an
     * authentication and provides corresponding error message to the customer.
     * If no value is provided, EMV 3DS 2.1.0 version will be used by default.
     * >2.1.0 - prefer authentication with 2.1.0 version
     * >
     * >2.2.0 - prefer authentication with 2.2.0 version
     * >
     * >2.3.1 - prefer authentication with 2.3.1 version
     * >
     */
    public function unsetPreferredProtocolVersion(): void
    {
        $this->preferredProtocolVersion = [];
    }

    /**
     * Returns Enforce Preferred Protocol Version.
     * Boolean flag that enforces preferred 3D Secure protocol version to be used in 3D Secure
     * authentication. The value should be set true to enforce preferred version. If value is false or not
     * provided, 3DS Server can fall back to next supported 3DS protocol version while initiating 3D Secure
     * authentication.
     */
    public function getEnforcePreferredProtocolVersion(): ?bool
    {
        return $this->enforcePreferredProtocolVersion;
    }

    /**
     * Sets Enforce Preferred Protocol Version.
     * Boolean flag that enforces preferred 3D Secure protocol version to be used in 3D Secure
     * authentication. The value should be set true to enforce preferred version. If value is false or not
     * provided, 3DS Server can fall back to next supported 3DS protocol version while initiating 3D Secure
     * authentication.
     *
     * @maps enforce_preferred_protocol_version
     */
    public function setEnforcePreferredProtocolVersion(?bool $enforcePreferredProtocolVersion): void
    {
        $this->enforcePreferredProtocolVersion = $enforcePreferredProtocolVersion;
    }

    /**
     * Returns Device Channel.
     * Indicates the type of channel interface being used to initiate the transaction.
     * >02 - Browser (BRW)
     * >
     * >03 - 3DS Requestor Initiated (3RI)
     * >
     */
    public function getDeviceChannel(): string
    {
        return $this->deviceChannel;
    }

    /**
     * Sets Device Channel.
     * Indicates the type of channel interface being used to initiate the transaction.
     * >02 - Browser (BRW)
     * >
     * >03 - 3DS Requestor Initiated (3RI)
     * >
     *
     * @required
     * @maps device_channel
     * @factory \FortisAPILib\Models\DeviceChannelEnum::checkValue
     */
    public function setDeviceChannel(string $deviceChannel): void
    {
        $this->deviceChannel = $deviceChannel;
    }

    /**
     * Returns Message Category.
     * Identifies the category of the message for a specific use case.
     * >01 - Payment Authentication (PA)
     * >
     * >02 - Non-Payment Authentication (NPA)
     * >
     * >80 through 99 - PS Specific Values
     * >
     * >80 - MasterCard Identity Check Insights
     * >
     * >85 - MasterCard Identity Check, Production Validation PA
     * >
     * >86 - MasterCard Identity Check, Production Validation NPA
     * >
     */
    public function getMessageCategory(): string
    {
        return $this->messageCategory;
    }

    /**
     * Sets Message Category.
     * Identifies the category of the message for a specific use case.
     * >01 - Payment Authentication (PA)
     * >
     * >02 - Non-Payment Authentication (NPA)
     * >
     * >80 through 99 - PS Specific Values
     * >
     * >80 - MasterCard Identity Check Insights
     * >
     * >85 - MasterCard Identity Check, Production Validation PA
     * >
     * >86 - MasterCard Identity Check, Production Validation NPA
     * >
     *
     * @required
     * @maps message_category
     * @factory \FortisAPILib\Models\MessageCategoryEnum::checkValue
     */
    public function setMessageCategory(string $messageCategory): void
    {
        $this->messageCategory = $messageCategory;
    }

    /**
     * Returns Three Ds Comp Ind.
     * Indicates whether the 3DS Method successfully completed. The value is used only when device_channel
     * = 02 (Browser).
     *
     * From protocol version 2.3.1 this field is required.
     * >Y - Successfully completed
     * >
     * >N - Did not successfully complete
     * >
     * >U - Unavailable - 3DS Method URL was not present in the PRes message data for the card range
     * associated with the Cardholder Account Number.
     * >
     */
    public function getThreeDsCompInd(): ?string
    {
        if (count($this->threeDsCompInd) == 0) {
            return null;
        }
        return $this->threeDsCompInd['value'];
    }

    /**
     * Sets Three Ds Comp Ind.
     * Indicates whether the 3DS Method successfully completed. The value is used only when device_channel
     * = 02 (Browser).
     *
     * From protocol version 2.3.1 this field is required.
     * >Y - Successfully completed
     * >
     * >N - Did not successfully complete
     * >
     * >U - Unavailable - 3DS Method URL was not present in the PRes message data for the card range
     * associated with the Cardholder Account Number.
     * >
     *
     * @maps three_ds_comp_ind
     */
    public function setThreeDsCompInd(?string $threeDsCompInd): void
    {
        $this->threeDsCompInd['value'] = $threeDsCompInd;
    }

    /**
     * Unsets Three Ds Comp Ind.
     * Indicates whether the 3DS Method successfully completed. The value is used only when device_channel
     * = 02 (Browser).
     *
     * From protocol version 2.3.1 this field is required.
     * >Y - Successfully completed
     * >
     * >N - Did not successfully complete
     * >
     * >U - Unavailable - 3DS Method URL was not present in the PRes message data for the card range
     * associated with the Cardholder Account Number.
     * >
     */
    public function unsetThreeDsCompInd(): void
    {
        $this->threeDsCompInd = [];
    }

    /**
     * Returns Three Ds Method Id.
     * Contains the 3DS Server Transaction ID used during the previous execution of the 3DS method.
     * Accepted value length is 36 characters. Accepted value is a Canonical format as defined in IETF RFC
     * 4122. May utilise any of the specified versions if the output meets specified requirements.
     * This field is required if the 3DS Requestor reuses previous 3DS Method execution with device_channel
     * = 02 (BRW). Available in EMV 3DS 2.3.1 and later versions.
     */
    public function getThreeDsMethodId(): ?string
    {
        if (count($this->threeDsMethodId) == 0) {
            return null;
        }
        return $this->threeDsMethodId['value'];
    }

    /**
     * Sets Three Ds Method Id.
     * Contains the 3DS Server Transaction ID used during the previous execution of the 3DS method.
     * Accepted value length is 36 characters. Accepted value is a Canonical format as defined in IETF RFC
     * 4122. May utilise any of the specified versions if the output meets specified requirements.
     * This field is required if the 3DS Requestor reuses previous 3DS Method execution with device_channel
     * = 02 (BRW). Available in EMV 3DS 2.3.1 and later versions.
     *
     * @maps three_ds_method_id
     */
    public function setThreeDsMethodId(?string $threeDsMethodId): void
    {
        $this->threeDsMethodId['value'] = $threeDsMethodId;
    }

    /**
     * Unsets Three Ds Method Id.
     * Contains the 3DS Server Transaction ID used during the previous execution of the 3DS method.
     * Accepted value length is 36 characters. Accepted value is a Canonical format as defined in IETF RFC
     * 4122. May utilise any of the specified versions if the output meets specified requirements.
     * This field is required if the 3DS Requestor reuses previous 3DS Method execution with device_channel
     * = 02 (BRW). Available in EMV 3DS 2.3.1 and later versions.
     */
    public function unsetThreeDsMethodId(): void
    {
        $this->threeDsMethodId = [];
    }

    /**
     * Returns Three Ds Requestor.
     * Contains information for the 3DS Requestor.
     */
    public function getThreeDsRequestor(): ThreeDsRequestor
    {
        return $this->threeDsRequestor;
    }

    /**
     * Sets Three Ds Requestor.
     * Contains information for the 3DS Requestor.
     *
     * @required
     * @maps three_ds_requestor
     */
    public function setThreeDsRequestor(ThreeDsRequestor $threeDsRequestor): void
    {
        $this->threeDsRequestor = $threeDsRequestor;
    }

    /**
     * Returns Three Ds Server Trans Id.
     * Universally unique transaction identifier assigned by the 3DS Server to identify a single
     * transaction. This value has 36 characters in a format defined in IETF RFC 4122. In case 3DS Method
     * is previously invoked, the threeDSServerTransID should be sent. If not, 3DS Server will generate a
     * new transaction identifier.
     *
     * If threeDSServerTransID is generated in versioning flow same transaction identifier should be used
     * in Authentication flow which combines them as one transaction.
     */
    public function getThreeDsServerTransId(): ?string
    {
        if (count($this->threeDsServerTransId) == 0) {
            return null;
        }
        return $this->threeDsServerTransId['value'];
    }

    /**
     * Sets Three Ds Server Trans Id.
     * Universally unique transaction identifier assigned by the 3DS Server to identify a single
     * transaction. This value has 36 characters in a format defined in IETF RFC 4122. In case 3DS Method
     * is previously invoked, the threeDSServerTransID should be sent. If not, 3DS Server will generate a
     * new transaction identifier.
     *
     * If threeDSServerTransID is generated in versioning flow same transaction identifier should be used
     * in Authentication flow which combines them as one transaction.
     *
     * @maps three_ds_server_trans_id
     */
    public function setThreeDsServerTransId(?string $threeDsServerTransId): void
    {
        $this->threeDsServerTransId['value'] = $threeDsServerTransId;
    }

    /**
     * Unsets Three Ds Server Trans Id.
     * Universally unique transaction identifier assigned by the 3DS Server to identify a single
     * transaction. This value has 36 characters in a format defined in IETF RFC 4122. In case 3DS Method
     * is previously invoked, the threeDSServerTransID should be sent. If not, 3DS Server will generate a
     * new transaction identifier.
     *
     * If threeDSServerTransID is generated in versioning flow same transaction identifier should be used
     * in Authentication flow which combines them as one transaction.
     */
    public function unsetThreeDsServerTransId(): void
    {
        $this->threeDsServerTransId = [];
    }

    /**
     * Returns Three Ds Requestor Url.
     * Fully qualified URL of 3DS Requestor website or customer care site.
     */
    public function getThreeDsRequestorUrl(): ?string
    {
        if (count($this->threeDsRequestorUrl) == 0) {
            return null;
        }
        return $this->threeDsRequestorUrl['value'];
    }

    /**
     * Sets Three Ds Requestor Url.
     * Fully qualified URL of 3DS Requestor website or customer care site.
     *
     * @maps three_ds_requestor_url
     */
    public function setThreeDsRequestorUrl(?string $threeDsRequestorUrl): void
    {
        $this->threeDsRequestorUrl['value'] = $threeDsRequestorUrl;
    }

    /**
     * Unsets Three Ds Requestor Url.
     * Fully qualified URL of 3DS Requestor website or customer care site.
     */
    public function unsetThreeDsRequestorUrl(): void
    {
        $this->threeDsRequestorUrl = [];
    }

    /**
     * Returns Cardholder Account.
     * Contains information for the Cardholder Account.
     */
    public function getCardholderAccount(): CardholderAccount
    {
        return $this->cardholderAccount;
    }

    /**
     * Sets Cardholder Account.
     * Contains information for the Cardholder Account.
     *
     * @required
     * @maps cardholder_account
     */
    public function setCardholderAccount(CardholderAccount $cardholderAccount): void
    {
        $this->cardholderAccount = $cardholderAccount;
    }

    /**
     * Returns Cardholder.
     * Contains information for the Cardholder. This field is required unless market or regional mandate
     * restricts sending this information.
     */
    public function getCardholder(): ?Cardholder
    {
        return $this->cardholder;
    }

    /**
     * Sets Cardholder.
     * Contains information for the Cardholder. This field is required unless market or regional mandate
     * restricts sending this information.
     *
     * @maps cardholder
     */
    public function setCardholder(?Cardholder $cardholder): void
    {
        $this->cardholder = $cardholder;
    }

    /**
     * Returns Purchase.
     * Contains purchase information
     */
    public function getPurchase(): ?Purchase
    {
        return $this->purchase;
    }

    /**
     * Sets Purchase.
     * Contains purchase information
     *
     * @maps purchase
     */
    public function setPurchase(?Purchase $purchase): void
    {
        $this->purchase = $purchase;
    }

    /**
     * Returns Broad Info.
     * Until EMV 3DS 2.2.0:
     *
     * Unstructured information sent between the 3DS Server, the DS and the ACS.
     *
     * This field is not required to be filled by the Requestor and the requirements for the presence of
     * this field are DS specific.
     *
     * Starting from EMV 3DS 2.3.1:
     *
     * Structured information sent between the 3DS Server, the DS and the ACS. 2.3.1 structure is defined
     * below. Accepted value length is maximum 4096 characters. This field is optional.
     */
    public function getBroadInfo(): ?BroadInfo
    {
        return $this->broadInfo;
    }

    /**
     * Sets Broad Info.
     * Until EMV 3DS 2.2.0:
     *
     * Unstructured information sent between the 3DS Server, the DS and the ACS.
     *
     * This field is not required to be filled by the Requestor and the requirements for the presence of
     * this field are DS specific.
     *
     * Starting from EMV 3DS 2.3.1:
     *
     * Structured information sent between the 3DS Server, the DS and the ACS. 2.3.1 structure is defined
     * below. Accepted value length is maximum 4096 characters. This field is optional.
     *
     * @maps broad_info
     */
    public function setBroadInfo(?BroadInfo $broadInfo): void
    {
        $this->broadInfo = $broadInfo;
    }

    /**
     * Returns Message Extension.
     * Data necessary to support requirements not otherwise defined in the 3D Secure message are carried in
     * a Message Extension. This field is limited to 81,920 characters and it is used in the Authentication
     * Request.
     *
     * Requirements of this field are set by each Directory Server.
     *
     * @return MessageExtension[]|null
     */
    public function getMessageExtension(): ?array
    {
        return $this->messageExtension;
    }

    /**
     * Sets Message Extension.
     * Data necessary to support requirements not otherwise defined in the 3D Secure message are carried in
     * a Message Extension. This field is limited to 81,920 characters and it is used in the Authentication
     * Request.
     *
     * Requirements of this field are set by each Directory Server.
     *
     * @maps message_extension
     *
     * @param MessageExtension[]|null $messageExtension
     */
    public function setMessageExtension(?array $messageExtension): void
    {
        $this->messageExtension = $messageExtension;
    }

    /**
     * Returns Challenge Message Extension.
     * Data necessary to support requirements not otherwise defined in the 3D Secure message are carried in
     * a Message Extension. This field is limited to 81,920 characters and it is used in the generating of
     * the ChallengeRequest, if challenge is needed.
     *
     * Requirements of this field are set by each Directory Server.
     *
     * @return ChallengeMessageExtension[]|null
     */
    public function getChallengeMessageExtension(): ?array
    {
        return $this->challengeMessageExtension;
    }

    /**
     * Sets Challenge Message Extension.
     * Data necessary to support requirements not otherwise defined in the 3D Secure message are carried in
     * a Message Extension. This field is limited to 81,920 characters and it is used in the generating of
     * the ChallengeRequest, if challenge is needed.
     *
     * Requirements of this field are set by each Directory Server.
     *
     * @maps challenge_message_extension
     *
     * @param ChallengeMessageExtension[]|null $challengeMessageExtension
     */
    public function setChallengeMessageExtension(?array $challengeMessageExtension): void
    {
        $this->challengeMessageExtension = $challengeMessageExtension;
    }

    /**
     * Returns Browser Information.
     * Contains browser information.
     *
     * This field is required when device_channel=02 (BRW).
     */
    public function getBrowserInformation(): ?BrowserInformation
    {
        return $this->browserInformation;
    }

    /**
     * Sets Browser Information.
     * Contains browser information.
     *
     * This field is required when device_channel=02 (BRW).
     *
     * @maps browser_information
     */
    public function setBrowserInformation(?BrowserInformation $browserInformation): void
    {
        $this->browserInformation = $browserInformation;
    }

    /**
     * Returns Three Ri Ind.
     * Indicates the type of 3RI request. This data element provides additional information to the ACS to
     * determine the best approach for handling a 3RI request.
     *
     * Values 06 through 12 are accepted as well if 3DS Server initiates authentication with EMV 3DS 2.2.0
     * version or greater (required protocol version can be set in the preferred_protocol_version field).
     *
     * Starting from EMV 3DS 2.3.1:
     * Required if device_channel = 03 and message_category = 01 or 02.
     * Values 13 and 14 can be used.
     * >01 - Recurring transaction
     * >
     * >02 - Installment transaction
     * >
     * >03 - Add card
     * >
     * >04 - Maintain card information
     * >
     * >05 - Account verification
     * >
     * >06 - Split/delayed shipment (EMV 3DS 2.2.0 version or greater)
     * >
     * >07 - Top-up (EMV 3DS 2.2.0 version or greater)
     * >
     * >08 - Mail order (EMV 3DS 2.2.0 version or greater)
     * >
     * >09 - Telephone order (EMV 3DS 2.2.0 version or greater)
     * >
     * >10 - Whitelist status check (EMV 3DS 2.2.0 version or greater)
     * >
     * >11 - Other payment (EMV 3DS 2.2.0 version or greater)
     * >
     * >12 - Billing agreement (EMV 3DS 2.2.0 version or greater)
     * >
     * >13 - Device Binding status check (EMV 3DS 2.3.1 version or greater)
     * >
     * >14 - Card Security Code status check (EMV 3DS 2.3.1 version or greater)
     * >
     * >80 through 99 - PS-specific values, regardless of protocol version
     * >
     */
    public function getThreeRiInd(): ?string
    {
        if (count($this->threeRiInd) == 0) {
            return null;
        }
        return $this->threeRiInd['value'];
    }

    /**
     * Sets Three Ri Ind.
     * Indicates the type of 3RI request. This data element provides additional information to the ACS to
     * determine the best approach for handling a 3RI request.
     *
     * Values 06 through 12 are accepted as well if 3DS Server initiates authentication with EMV 3DS 2.2.0
     * version or greater (required protocol version can be set in the preferred_protocol_version field).
     *
     * Starting from EMV 3DS 2.3.1:
     * Required if device_channel = 03 and message_category = 01 or 02.
     * Values 13 and 14 can be used.
     * >01 - Recurring transaction
     * >
     * >02 - Installment transaction
     * >
     * >03 - Add card
     * >
     * >04 - Maintain card information
     * >
     * >05 - Account verification
     * >
     * >06 - Split/delayed shipment (EMV 3DS 2.2.0 version or greater)
     * >
     * >07 - Top-up (EMV 3DS 2.2.0 version or greater)
     * >
     * >08 - Mail order (EMV 3DS 2.2.0 version or greater)
     * >
     * >09 - Telephone order (EMV 3DS 2.2.0 version or greater)
     * >
     * >10 - Whitelist status check (EMV 3DS 2.2.0 version or greater)
     * >
     * >11 - Other payment (EMV 3DS 2.2.0 version or greater)
     * >
     * >12 - Billing agreement (EMV 3DS 2.2.0 version or greater)
     * >
     * >13 - Device Binding status check (EMV 3DS 2.3.1 version or greater)
     * >
     * >14 - Card Security Code status check (EMV 3DS 2.3.1 version or greater)
     * >
     * >80 through 99 - PS-specific values, regardless of protocol version
     * >
     *
     * @maps three_ri_ind
     * @factory \FortisAPILib\Models\ThreeRiIndEnum::checkValue
     */
    public function setThreeRiInd(?string $threeRiInd): void
    {
        $this->threeRiInd['value'] = $threeRiInd;
    }

    /**
     * Unsets Three Ri Ind.
     * Indicates the type of 3RI request. This data element provides additional information to the ACS to
     * determine the best approach for handling a 3RI request.
     *
     * Values 06 through 12 are accepted as well if 3DS Server initiates authentication with EMV 3DS 2.2.0
     * version or greater (required protocol version can be set in the preferred_protocol_version field).
     *
     * Starting from EMV 3DS 2.3.1:
     * Required if device_channel = 03 and message_category = 01 or 02.
     * Values 13 and 14 can be used.
     * >01 - Recurring transaction
     * >
     * >02 - Installment transaction
     * >
     * >03 - Add card
     * >
     * >04 - Maintain card information
     * >
     * >05 - Account verification
     * >
     * >06 - Split/delayed shipment (EMV 3DS 2.2.0 version or greater)
     * >
     * >07 - Top-up (EMV 3DS 2.2.0 version or greater)
     * >
     * >08 - Mail order (EMV 3DS 2.2.0 version or greater)
     * >
     * >09 - Telephone order (EMV 3DS 2.2.0 version or greater)
     * >
     * >10 - Whitelist status check (EMV 3DS 2.2.0 version or greater)
     * >
     * >11 - Other payment (EMV 3DS 2.2.0 version or greater)
     * >
     * >12 - Billing agreement (EMV 3DS 2.2.0 version or greater)
     * >
     * >13 - Device Binding status check (EMV 3DS 2.3.1 version or greater)
     * >
     * >14 - Card Security Code status check (EMV 3DS 2.3.1 version or greater)
     * >
     * >80 through 99 - PS-specific values, regardless of protocol version
     * >
     */
    public function unsetThreeRiInd(): void
    {
        $this->threeRiInd = [];
    }

    /**
     * Returns Device.
     * Contains device information.
     *
     * Available for supporting EMV 3DS 2.3.1 and later versions.
     */
    public function getDevice(): ?Device
    {
        return $this->device;
    }

    /**
     * Sets Device.
     * Contains device information.
     *
     * Available for supporting EMV 3DS 2.3.1 and later versions.
     *
     * @maps device
     */
    public function setDevice(?Device $device): void
    {
        $this->device = $device;
    }

    /**
     * Returns Multi Transaction.
     * Additional transaction information in case of multiple transactions or merchants.
     *
     * Available for supporting EMV 3DS 2.3.1 and later versions.
     */
    public function getMultiTransaction(): ?MultiTransaction
    {
        return $this->multiTransaction;
    }

    /**
     * Sets Multi Transaction.
     * Additional transaction information in case of multiple transactions or merchants.
     *
     * Available for supporting EMV 3DS 2.3.1 and later versions.
     *
     * @maps multi_transaction
     */
    public function setMultiTransaction(?MultiTransaction $multiTransaction): void
    {
        $this->multiTransaction = $multiTransaction;
    }

    /**
     * Returns Device Id.
     * Unique and immutable identifier linked to a device that is consistent across 3DS transactions for
     * the specific user device.
     *
     * Available for supporting EMV 3DS 2.3.1 and later versions.
     */
    public function getDeviceId(): ?string
    {
        if (count($this->deviceId) == 0) {
            return null;
        }
        return $this->deviceId['value'];
    }

    /**
     * Sets Device Id.
     * Unique and immutable identifier linked to a device that is consistent across 3DS transactions for
     * the specific user device.
     *
     * Available for supporting EMV 3DS 2.3.1 and later versions.
     *
     * @maps device_id
     */
    public function setDeviceId(?string $deviceId): void
    {
        $this->deviceId['value'] = $deviceId;
    }

    /**
     * Unsets Device Id.
     * Unique and immutable identifier linked to a device that is consistent across 3DS transactions for
     * the specific user device.
     *
     * Available for supporting EMV 3DS 2.3.1 and later versions.
     */
    public function unsetDeviceId(): void
    {
        $this->deviceId = [];
    }

    /**
     * Returns User Id.
     * Identifier of the transacting user’s Browser Account ID.
     *
     * Available for supporting EMV 3DS 2.3.1 and later versions.
     */
    public function getUserId(): ?string
    {
        if (count($this->userId) == 0) {
            return null;
        }
        return $this->userId['value'];
    }

    /**
     * Sets User Id.
     * Identifier of the transacting user’s Browser Account ID.
     *
     * Available for supporting EMV 3DS 2.3.1 and later versions.
     *
     * @maps user_id
     */
    public function setUserId(?string $userId): void
    {
        $this->userId['value'] = $userId;
    }

    /**
     * Unsets User Id.
     * Identifier of the transacting user’s Browser Account ID.
     *
     * Available for supporting EMV 3DS 2.3.1 and later versions.
     */
    public function unsetUserId(): void
    {
        $this->userId = [];
    }

    /**
     * Returns Payee Origin.
     * The origin of the payee that will be provided in the SPC Transaction Data as a fully qualified URL.
     */
    public function getPayeeOrigin(): ?string
    {
        if (count($this->payeeOrigin) == 0) {
            return null;
        }
        return $this->payeeOrigin['value'];
    }

    /**
     * Sets Payee Origin.
     * The origin of the payee that will be provided in the SPC Transaction Data as a fully qualified URL.
     *
     * @maps payee_origin
     */
    public function setPayeeOrigin(?string $payeeOrigin): void
    {
        $this->payeeOrigin['value'] = $payeeOrigin;
    }

    /**
     * Unsets Payee Origin.
     * The origin of the payee that will be provided in the SPC Transaction Data as a fully qualified URL.
     */
    public function unsetPayeeOrigin(): void
    {
        $this->payeeOrigin = [];
    }

    /**
     * Converts the V1MerchantThreedsecureAuthenticationRequest object to a human-readable string
     * representation.
     *
     * @return string The string representation of the V1MerchantThreedsecureAuthenticationRequest object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'V1MerchantThreedsecureAuthenticationRequest',
            [
                'productTransactionId' => $this->productTransactionId,
                'preferredProtocolVersion' => $this->getPreferredProtocolVersion(),
                'enforcePreferredProtocolVersion' => $this->enforcePreferredProtocolVersion,
                'deviceChannel' => $this->deviceChannel,
                'messageCategory' => $this->messageCategory,
                'threeDsCompInd' => $this->getThreeDsCompInd(),
                'threeDsMethodId' => $this->getThreeDsMethodId(),
                'threeDsRequestor' => $this->threeDsRequestor,
                'threeDsServerTransId' => $this->getThreeDsServerTransId(),
                'threeDsRequestorUrl' => $this->getThreeDsRequestorUrl(),
                'cardholderAccount' => $this->cardholderAccount,
                'cardholder' => $this->cardholder,
                'purchase' => $this->purchase,
                'broadInfo' => $this->broadInfo,
                'messageExtension' => $this->messageExtension,
                'challengeMessageExtension' => $this->challengeMessageExtension,
                'browserInformation' => $this->browserInformation,
                'threeRiInd' => $this->getThreeRiInd(),
                'device' => $this->device,
                'multiTransaction' => $this->multiTransaction,
                'deviceId' => $this->getDeviceId(),
                'userId' => $this->getUserId(),
                'payeeOrigin' => $this->getPayeeOrigin(),
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['product_transaction_id']                 = $this->productTransactionId;
        if (!empty($this->preferredProtocolVersion)) {
            $json['preferred_protocol_version']         =
                PreferredProtocolVersionEnum::checkValue(
                    $this->preferredProtocolVersion['value']
                );
        }
        if (isset($this->enforcePreferredProtocolVersion)) {
            $json['enforce_preferred_protocol_version'] = $this->enforcePreferredProtocolVersion;
        }
        $json['device_channel']                         = DeviceChannelEnum::checkValue($this->deviceChannel);
        $json['message_category']                       = MessageCategoryEnum::checkValue($this->messageCategory);
        if (!empty($this->threeDsCompInd)) {
            $json['three_ds_comp_ind']                  = $this->threeDsCompInd['value'];
        }
        if (!empty($this->threeDsMethodId)) {
            $json['three_ds_method_id']                 = $this->threeDsMethodId['value'];
        }
        $json['three_ds_requestor']                     = $this->threeDsRequestor;
        if (!empty($this->threeDsServerTransId)) {
            $json['three_ds_server_trans_id']           = $this->threeDsServerTransId['value'];
        }
        if (!empty($this->threeDsRequestorUrl)) {
            $json['three_ds_requestor_url']             = $this->threeDsRequestorUrl['value'];
        }
        $json['cardholder_account']                     = $this->cardholderAccount;
        if (isset($this->cardholder)) {
            $json['cardholder']                         = $this->cardholder;
        }
        if (isset($this->purchase)) {
            $json['purchase']                           = $this->purchase;
        }
        if (isset($this->broadInfo)) {
            $json['broad_info']                         = $this->broadInfo;
        }
        if (isset($this->messageExtension)) {
            $json['message_extension']                  = $this->messageExtension;
        }
        if (isset($this->challengeMessageExtension)) {
            $json['challenge_message_extension']        = $this->challengeMessageExtension;
        }
        if (isset($this->browserInformation)) {
            $json['browser_information']                = $this->browserInformation;
        }
        if (!empty($this->threeRiInd)) {
            $json['three_ri_ind']                       = ThreeRiIndEnum::checkValue($this->threeRiInd['value']);
        }
        if (isset($this->device)) {
            $json['device']                             = $this->device;
        }
        if (isset($this->multiTransaction)) {
            $json['multi_transaction']                  = $this->multiTransaction;
        }
        if (!empty($this->deviceId)) {
            $json['device_id']                          = $this->deviceId['value'];
        }
        if (!empty($this->userId)) {
            $json['user_id']                            = $this->userId['value'];
        }
        if (!empty($this->payeeOrigin)) {
            $json['payee_origin']                       = $this->payeeOrigin['value'];
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

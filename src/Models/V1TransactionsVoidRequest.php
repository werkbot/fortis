<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use FortisAPILib\ApiHelper;
use stdClass;

class V1TransactionsVoidRequest implements \JsonSerializable
{
    /**
     * @var array
     */
    private $tags = [];

    /**
     * @var array
     */
    private $description = [];

    /**
     * Returns Tags.
     * Tags
     *
     * @return string[]|null
     */
    public function getTags(): ?array
    {
        if (count($this->tags) == 0) {
            return null;
        }
        return $this->tags['value'];
    }

    /**
     * Sets Tags.
     * Tags
     *
     * @maps tags
     *
     * @param string[]|null $tags
     */
    public function setTags(?array $tags): void
    {
        $this->tags['value'] = $tags;
    }

    /**
     * Unsets Tags.
     * Tags
     */
    public function unsetTags(): void
    {
        $this->tags = [];
    }

    /**
     * Returns Description.
     * Description
     */
    public function getDescription(): ?string
    {
        if (count($this->description) == 0) {
            return null;
        }
        return $this->description['value'];
    }

    /**
     * Sets Description.
     * Description
     *
     * @maps description
     */
    public function setDescription(?string $description): void
    {
        $this->description['value'] = $description;
    }

    /**
     * Unsets Description.
     * Description
     */
    public function unsetDescription(): void
    {
        $this->description = [];
    }

    /**
     * Converts the V1TransactionsVoidRequest object to a human-readable string representation.
     *
     * @return string The string representation of the V1TransactionsVoidRequest object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'V1TransactionsVoidRequest',
            [
                'tags' => $this->getTags(),
                'description' => $this->getDescription(),
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->tags)) {
            $json['tags']        = $this->tags['value'];
        }
        if (!empty($this->description)) {
            $json['description'] = $this->description['value'];
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

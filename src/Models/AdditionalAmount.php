<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use FortisAPILib\ApiHelper;
use stdClass;

class AdditionalAmount implements \JsonSerializable
{
    /**
     * @var array
     */
    private $type = [];

    /**
     * @var array
     */
    private $amount = [];

    /**
     * @var array
     */
    private $accountType = [];

    /**
     * @var array
     */
    private $currency = [];

    /**
     * Returns Type.
     * type of the amount [4S-Healthcare(Visa and MC Only), 4U-Prescription/Rx(Visa and MC Only), 4V-
     * Vision/Optical(Visa Only), 4W-clinic/other qualified medical(Visa Only) ,4X-Dental(Visa Only)].
     */
    public function getType(): ?string
    {
        if (count($this->type) == 0) {
            return null;
        }
        return $this->type['value'];
    }

    /**
     * Sets Type.
     * type of the amount [4S-Healthcare(Visa and MC Only), 4U-Prescription/Rx(Visa and MC Only), 4V-
     * Vision/Optical(Visa Only), 4W-clinic/other qualified medical(Visa Only) ,4X-Dental(Visa Only)].
     *
     * @maps type
     * @factory \FortisAPILib\Models\Type60Enum::checkValue
     */
    public function setType(?string $type): void
    {
        $this->type['value'] = $type;
    }

    /**
     * Unsets Type.
     * type of the amount [4S-Healthcare(Visa and MC Only), 4U-Prescription/Rx(Visa and MC Only), 4V-
     * Vision/Optical(Visa Only), 4W-clinic/other qualified medical(Visa Only) ,4X-Dental(Visa Only)].
     */
    public function unsetType(): void
    {
        $this->type = [];
    }

    /**
     * Returns Amount.
     * The amount of additional amount.
     */
    public function getAmount(): ?int
    {
        if (count($this->amount) == 0) {
            return null;
        }
        return $this->amount['value'];
    }

    /**
     * Sets Amount.
     * The amount of additional amount.
     *
     * @maps amount
     */
    public function setAmount(?int $amount): void
    {
        $this->amount['value'] = $amount;
    }

    /**
     * Unsets Amount.
     * The amount of additional amount.
     */
    public function unsetAmount(): void
    {
        $this->amount = [];
    }

    /**
     * Returns Account Type.
     * Account Type
     */
    public function getAccountType(): ?string
    {
        if (count($this->accountType) == 0) {
            return null;
        }
        return $this->accountType['value'];
    }

    /**
     * Sets Account Type.
     * Account Type
     *
     * @maps account_type
     * @factory \FortisAPILib\Models\AccountTypeEnum::checkValue
     */
    public function setAccountType(?string $accountType): void
    {
        $this->accountType['value'] = $accountType;
    }

    /**
     * Unsets Account Type.
     * Account Type
     */
    public function unsetAccountType(): void
    {
        $this->accountType = [];
    }

    /**
     * Returns Currency.
     * Currency Code
     */
    public function getCurrency(): ?float
    {
        if (count($this->currency) == 0) {
            return null;
        }
        return $this->currency['value'];
    }

    /**
     * Sets Currency.
     * Currency Code
     *
     * @maps currency
     */
    public function setCurrency(?float $currency): void
    {
        $this->currency['value'] = $currency;
    }

    /**
     * Unsets Currency.
     * Currency Code
     */
    public function unsetCurrency(): void
    {
        $this->currency = [];
    }

    /**
     * Converts the AdditionalAmount object to a human-readable string representation.
     *
     * @return string The string representation of the AdditionalAmount object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'AdditionalAmount',
            [
                'type' => $this->getType(),
                'amount' => $this->getAmount(),
                'accountType' => $this->getAccountType(),
                'currency' => $this->getCurrency(),
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->type)) {
            $json['type']         = Type60Enum::checkValue($this->type['value']);
        }
        if (!empty($this->amount)) {
            $json['amount']       = $this->amount['value'];
        }
        if (!empty($this->accountType)) {
            $json['account_type'] = AccountTypeEnum::checkValue($this->accountType['value']);
        }
        if (!empty($this->currency)) {
            $json['currency']     = $this->currency['value'];
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

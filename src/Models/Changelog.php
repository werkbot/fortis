<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use FortisAPILib\ApiHelper;
use stdClass;

class Changelog implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $id;

    /**
     * @var array
     */
    private $createdTs = [];

    /**
     * @var array
     */
    private $action = [];

    /**
     * @var array
     */
    private $model = [];

    /**
     * @var array
     */
    private $modelId = [];

    /**
     * @var array
     */
    private $userId = [];

    /**
     * @var ChangelogDetail[]|null
     */
    private $changelogDetails;

    /**
     * @var User|null
     */
    private $user;

    /**
     * Returns Id.
     * Change Log ID
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Change Log ID
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Created Ts.
     * Created Time Stamp
     */
    public function getCreatedTs(): ?int
    {
        if (count($this->createdTs) == 0) {
            return null;
        }
        return $this->createdTs['value'];
    }

    /**
     * Sets Created Ts.
     * Created Time Stamp
     *
     * @maps created_ts
     */
    public function setCreatedTs(?int $createdTs): void
    {
        $this->createdTs['value'] = $createdTs;
    }

    /**
     * Unsets Created Ts.
     * Created Time Stamp
     */
    public function unsetCreatedTs(): void
    {
        $this->createdTs = [];
    }

    /**
     * Returns Action.
     * Action
     */
    public function getAction(): ?string
    {
        if (count($this->action) == 0) {
            return null;
        }
        return $this->action['value'];
    }

    /**
     * Sets Action.
     * Action
     *
     * @maps action
     */
    public function setAction(?string $action): void
    {
        $this->action['value'] = $action;
    }

    /**
     * Unsets Action.
     * Action
     */
    public function unsetAction(): void
    {
        $this->action = [];
    }

    /**
     * Returns Model.
     * Model
     */
    public function getModel(): ?string
    {
        if (count($this->model) == 0) {
            return null;
        }
        return $this->model['value'];
    }

    /**
     * Sets Model.
     * Model
     *
     * @maps model
     */
    public function setModel(?string $model): void
    {
        $this->model['value'] = $model;
    }

    /**
     * Unsets Model.
     * Model
     */
    public function unsetModel(): void
    {
        $this->model = [];
    }

    /**
     * Returns Model Id.
     * Model ID
     */
    public function getModelId(): ?string
    {
        if (count($this->modelId) == 0) {
            return null;
        }
        return $this->modelId['value'];
    }

    /**
     * Sets Model Id.
     * Model ID
     *
     * @maps model_id
     */
    public function setModelId(?string $modelId): void
    {
        $this->modelId['value'] = $modelId;
    }

    /**
     * Unsets Model Id.
     * Model ID
     */
    public function unsetModelId(): void
    {
        $this->modelId = [];
    }

    /**
     * Returns User Id.
     * User ID
     */
    public function getUserId(): ?string
    {
        if (count($this->userId) == 0) {
            return null;
        }
        return $this->userId['value'];
    }

    /**
     * Sets User Id.
     * User ID
     *
     * @maps user_id
     */
    public function setUserId(?string $userId): void
    {
        $this->userId['value'] = $userId;
    }

    /**
     * Unsets User Id.
     * User ID
     */
    public function unsetUserId(): void
    {
        $this->userId = [];
    }

    /**
     * Returns Changelog Details.
     * Change Log Details
     *
     * @return ChangelogDetail[]|null
     */
    public function getChangelogDetails(): ?array
    {
        return $this->changelogDetails;
    }

    /**
     * Sets Changelog Details.
     * Change Log Details
     *
     * @maps changelog_details
     *
     * @param ChangelogDetail[]|null $changelogDetails
     */
    public function setChangelogDetails(?array $changelogDetails): void
    {
        $this->changelogDetails = $changelogDetails;
    }

    /**
     * Returns User.
     * User
     */
    public function getUser(): ?User
    {
        return $this->user;
    }

    /**
     * Sets User.
     * User
     *
     * @maps user
     */
    public function setUser(?User $user): void
    {
        $this->user = $user;
    }

    /**
     * Converts the Changelog object to a human-readable string representation.
     *
     * @return string The string representation of the Changelog object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'Changelog',
            [
                'id' => $this->id,
                'createdTs' => $this->getCreatedTs(),
                'action' => $this->getAction(),
                'model' => $this->getModel(),
                'modelId' => $this->getModelId(),
                'userId' => $this->getUserId(),
                'changelogDetails' => $this->changelogDetails,
                'user' => $this->user,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->id)) {
            $json['id']                = $this->id;
        }
        if (!empty($this->createdTs)) {
            $json['created_ts']        = $this->createdTs['value'];
        }
        if (!empty($this->action)) {
            $json['action']            = $this->action['value'];
        }
        if (!empty($this->model)) {
            $json['model']             = $this->model['value'];
        }
        if (!empty($this->modelId)) {
            $json['model_id']          = $this->modelId['value'];
        }
        if (!empty($this->userId)) {
            $json['user_id']           = $this->userId['value'];
        }
        if (isset($this->changelogDetails)) {
            $json['changelog_details'] = $this->changelogDetails;
        }
        if (isset($this->user)) {
            $json['user']              = $this->user;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

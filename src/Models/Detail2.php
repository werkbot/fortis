<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use FortisAPILib\ApiHelper;
use stdClass;

class Detail2 implements \JsonSerializable
{
    /**
     * @var array
     */
    private $processorBatchNumber = [];

    /**
     * @var array
     */
    private $productCode = [];

    /**
     * @var array
     */
    private $depositDetailType = [];

    /**
     * @var float|null
     */
    private $amount;

    /**
     * @var array
     */
    private $memo = [];

    /**
     * @var array
     */
    private $reportedDate = [];

    /**
     * @var array
     */
    private $settledDate = [];

    /**
     * @var array
     */
    private $mid = [];

    /**
     * Returns Processor Batch Number.
     * Processor Batch Number
     */
    public function getProcessorBatchNumber(): ?string
    {
        if (count($this->processorBatchNumber) == 0) {
            return null;
        }
        return $this->processorBatchNumber['value'];
    }

    /**
     * Sets Processor Batch Number.
     * Processor Batch Number
     *
     * @maps processor_batch_number
     */
    public function setProcessorBatchNumber(?string $processorBatchNumber): void
    {
        $this->processorBatchNumber['value'] = $processorBatchNumber;
    }

    /**
     * Unsets Processor Batch Number.
     * Processor Batch Number
     */
    public function unsetProcessorBatchNumber(): void
    {
        $this->processorBatchNumber = [];
    }

    /**
     * Returns Product Code.
     * Product Code
     */
    public function getProductCode(): ?string
    {
        if (count($this->productCode) == 0) {
            return null;
        }
        return $this->productCode['value'];
    }

    /**
     * Sets Product Code.
     * Product Code
     *
     * @maps product_code
     */
    public function setProductCode(?string $productCode): void
    {
        $this->productCode['value'] = $productCode;
    }

    /**
     * Unsets Product Code.
     * Product Code
     */
    public function unsetProductCode(): void
    {
        $this->productCode = [];
    }

    /**
     * Returns Deposit Detail Type.
     * Deposit Detail Type
     */
    public function getDepositDetailType(): ?string
    {
        if (count($this->depositDetailType) == 0) {
            return null;
        }
        return $this->depositDetailType['value'];
    }

    /**
     * Sets Deposit Detail Type.
     * Deposit Detail Type
     *
     * @maps deposit_detail_type
     */
    public function setDepositDetailType(?string $depositDetailType): void
    {
        $this->depositDetailType['value'] = $depositDetailType;
    }

    /**
     * Unsets Deposit Detail Type.
     * Deposit Detail Type
     */
    public function unsetDepositDetailType(): void
    {
        $this->depositDetailType = [];
    }

    /**
     * Returns Amount.
     * Amount
     */
    public function getAmount(): ?float
    {
        return $this->amount;
    }

    /**
     * Sets Amount.
     * Amount
     *
     * @maps amount
     */
    public function setAmount(?float $amount): void
    {
        $this->amount = $amount;
    }

    /**
     * Returns Memo.
     * Memo
     */
    public function getMemo(): ?string
    {
        if (count($this->memo) == 0) {
            return null;
        }
        return $this->memo['value'];
    }

    /**
     * Sets Memo.
     * Memo
     *
     * @maps memo
     */
    public function setMemo(?string $memo): void
    {
        $this->memo['value'] = $memo;
    }

    /**
     * Unsets Memo.
     * Memo
     */
    public function unsetMemo(): void
    {
        $this->memo = [];
    }

    /**
     * Returns Reported Date.
     * Reported Date
     */
    public function getReportedDate(): ?string
    {
        if (count($this->reportedDate) == 0) {
            return null;
        }
        return $this->reportedDate['value'];
    }

    /**
     * Sets Reported Date.
     * Reported Date
     *
     * @maps reported_date
     */
    public function setReportedDate(?string $reportedDate): void
    {
        $this->reportedDate['value'] = $reportedDate;
    }

    /**
     * Unsets Reported Date.
     * Reported Date
     */
    public function unsetReportedDate(): void
    {
        $this->reportedDate = [];
    }

    /**
     * Returns Settled Date.
     * Settled Date
     */
    public function getSettledDate(): ?string
    {
        if (count($this->settledDate) == 0) {
            return null;
        }
        return $this->settledDate['value'];
    }

    /**
     * Sets Settled Date.
     * Settled Date
     *
     * @maps settled_date
     */
    public function setSettledDate(?string $settledDate): void
    {
        $this->settledDate['value'] = $settledDate;
    }

    /**
     * Unsets Settled Date.
     * Settled Date
     */
    public function unsetSettledDate(): void
    {
        $this->settledDate = [];
    }

    /**
     * Returns Mid.
     * Merchant ID
     */
    public function getMid(): ?string
    {
        if (count($this->mid) == 0) {
            return null;
        }
        return $this->mid['value'];
    }

    /**
     * Sets Mid.
     * Merchant ID
     *
     * @maps mid
     */
    public function setMid(?string $mid): void
    {
        $this->mid['value'] = $mid;
    }

    /**
     * Unsets Mid.
     * Merchant ID
     */
    public function unsetMid(): void
    {
        $this->mid = [];
    }

    /**
     * Converts the Detail2 object to a human-readable string representation.
     *
     * @return string The string representation of the Detail2 object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'Detail2',
            [
                'processorBatchNumber' => $this->getProcessorBatchNumber(),
                'productCode' => $this->getProductCode(),
                'depositDetailType' => $this->getDepositDetailType(),
                'amount' => $this->amount,
                'memo' => $this->getMemo(),
                'reportedDate' => $this->getReportedDate(),
                'settledDate' => $this->getSettledDate(),
                'mid' => $this->getMid(),
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->processorBatchNumber)) {
            $json['processor_batch_number'] = $this->processorBatchNumber['value'];
        }
        if (!empty($this->productCode)) {
            $json['product_code']           = $this->productCode['value'];
        }
        if (!empty($this->depositDetailType)) {
            $json['deposit_detail_type']    = $this->depositDetailType['value'];
        }
        if (isset($this->amount)) {
            $json['amount']                 = $this->amount;
        }
        if (!empty($this->memo)) {
            $json['memo']                   = $this->memo['value'];
        }
        if (!empty($this->reportedDate)) {
            $json['reported_date']          = $this->reportedDate['value'];
        }
        if (!empty($this->settledDate)) {
            $json['settled_date']           = $this->settledDate['value'];
        }
        if (!empty($this->mid)) {
            $json['mid']                    = $this->mid['value'];
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use FortisAPILib\ApiHelper;
use stdClass;

/**
 * Product recurring array
 */
class ProductRecurring implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $title;

    /**
     * @var string|null
     */
    private $locationId;

    /**
     * @var array
     */
    private $locationApiId = [];

    /**
     * @var bool|null
     */
    private $sendDeclinedNotifications;

    /**
     * @var bool|null
     */
    private $requireFullPayment;

    /**
     * @var bool|null
     */
    private $expireNotificationEmailEnable;

    /**
     * @var bool|null
     */
    private $expireNotificationSmsEnable;

    /**
     * @var array
     */
    private $notificationDaysDefault = [];

    /**
     * @var string|null
     */
    private $id;

    /**
     * @var int|null
     */
    private $createdTs;

    /**
     * @var int|null
     */
    private $modifiedTs;

    /**
     * @var array
     */
    private $createdUserId = [];

    /**
     * @var array
     */
    private $modifiedUserId = [];

    /**
     * Returns Title.
     * Title
     */
    public function getTitle(): ?string
    {
        return $this->title;
    }

    /**
     * Sets Title.
     * Title
     *
     * @maps title
     */
    public function setTitle(?string $title): void
    {
        $this->title = $title;
    }

    /**
     * Returns Location Id.
     * Location ID
     */
    public function getLocationId(): ?string
    {
        return $this->locationId;
    }

    /**
     * Sets Location Id.
     * Location ID
     *
     * @maps location_id
     */
    public function setLocationId(?string $locationId): void
    {
        $this->locationId = $locationId;
    }

    /**
     * Returns Location Api Id.
     * Location Api ID
     */
    public function getLocationApiId(): ?string
    {
        if (count($this->locationApiId) == 0) {
            return null;
        }
        return $this->locationApiId['value'];
    }

    /**
     * Sets Location Api Id.
     * Location Api ID
     *
     * @maps location_api_id
     */
    public function setLocationApiId(?string $locationApiId): void
    {
        $this->locationApiId['value'] = $locationApiId;
    }

    /**
     * Unsets Location Api Id.
     * Location Api ID
     */
    public function unsetLocationApiId(): void
    {
        $this->locationApiId = [];
    }

    /**
     * Returns Send Declined Notifications.
     * Send Declined Notifications
     */
    public function getSendDeclinedNotifications(): ?bool
    {
        return $this->sendDeclinedNotifications;
    }

    /**
     * Sets Send Declined Notifications.
     * Send Declined Notifications
     *
     * @maps send_declined_notifications
     */
    public function setSendDeclinedNotifications(?bool $sendDeclinedNotifications): void
    {
        $this->sendDeclinedNotifications = $sendDeclinedNotifications;
    }

    /**
     * Returns Require Full Payment.
     * Require Full Payment
     */
    public function getRequireFullPayment(): ?bool
    {
        return $this->requireFullPayment;
    }

    /**
     * Sets Require Full Payment.
     * Require Full Payment
     *
     * @maps require_full_payment
     */
    public function setRequireFullPayment(?bool $requireFullPayment): void
    {
        $this->requireFullPayment = $requireFullPayment;
    }

    /**
     * Returns Expire Notification Email Enable.
     * Expire Notification Email Enable
     */
    public function getExpireNotificationEmailEnable(): ?bool
    {
        return $this->expireNotificationEmailEnable;
    }

    /**
     * Sets Expire Notification Email Enable.
     * Expire Notification Email Enable
     *
     * @maps expire_notification_email_enable
     */
    public function setExpireNotificationEmailEnable(?bool $expireNotificationEmailEnable): void
    {
        $this->expireNotificationEmailEnable = $expireNotificationEmailEnable;
    }

    /**
     * Returns Expire Notification Sms Enable.
     * Expire Notification SMS Enable
     */
    public function getExpireNotificationSmsEnable(): ?bool
    {
        return $this->expireNotificationSmsEnable;
    }

    /**
     * Sets Expire Notification Sms Enable.
     * Expire Notification SMS Enable
     *
     * @maps expire_notification_sms_enable
     */
    public function setExpireNotificationSmsEnable(?bool $expireNotificationSmsEnable): void
    {
        $this->expireNotificationSmsEnable = $expireNotificationSmsEnable;
    }

    /**
     * Returns Notification Days Default.
     * Notification Days Default
     */
    public function getNotificationDaysDefault(): ?int
    {
        if (count($this->notificationDaysDefault) == 0) {
            return null;
        }
        return $this->notificationDaysDefault['value'];
    }

    /**
     * Sets Notification Days Default.
     * Notification Days Default
     *
     * @maps notification_days_default
     */
    public function setNotificationDaysDefault(?int $notificationDaysDefault): void
    {
        $this->notificationDaysDefault['value'] = $notificationDaysDefault;
    }

    /**
     * Unsets Notification Days Default.
     * Notification Days Default
     */
    public function unsetNotificationDaysDefault(): void
    {
        $this->notificationDaysDefault = [];
    }

    /**
     * Returns Id.
     * Product Recurring Id
     */
    public function getId(): ?string
    {
        return $this->id;
    }

    /**
     * Sets Id.
     * Product Recurring Id
     *
     * @maps id
     */
    public function setId(?string $id): void
    {
        $this->id = $id;
    }

    /**
     * Returns Created Ts.
     * Created Time Stamp
     */
    public function getCreatedTs(): ?int
    {
        return $this->createdTs;
    }

    /**
     * Sets Created Ts.
     * Created Time Stamp
     *
     * @maps created_ts
     */
    public function setCreatedTs(?int $createdTs): void
    {
        $this->createdTs = $createdTs;
    }

    /**
     * Returns Modified Ts.
     * Modified Time Stamp
     */
    public function getModifiedTs(): ?int
    {
        return $this->modifiedTs;
    }

    /**
     * Sets Modified Ts.
     * Modified Time Stamp
     *
     * @maps modified_ts
     */
    public function setModifiedTs(?int $modifiedTs): void
    {
        $this->modifiedTs = $modifiedTs;
    }

    /**
     * Returns Created User Id.
     * Created User Id
     */
    public function getCreatedUserId(): ?string
    {
        if (count($this->createdUserId) == 0) {
            return null;
        }
        return $this->createdUserId['value'];
    }

    /**
     * Sets Created User Id.
     * Created User Id
     *
     * @maps created_user_id
     */
    public function setCreatedUserId(?string $createdUserId): void
    {
        $this->createdUserId['value'] = $createdUserId;
    }

    /**
     * Unsets Created User Id.
     * Created User Id
     */
    public function unsetCreatedUserId(): void
    {
        $this->createdUserId = [];
    }

    /**
     * Returns Modified User Id.
     * Modified User Id
     */
    public function getModifiedUserId(): ?string
    {
        if (count($this->modifiedUserId) == 0) {
            return null;
        }
        return $this->modifiedUserId['value'];
    }

    /**
     * Sets Modified User Id.
     * Modified User Id
     *
     * @maps modified_user_id
     */
    public function setModifiedUserId(?string $modifiedUserId): void
    {
        $this->modifiedUserId['value'] = $modifiedUserId;
    }

    /**
     * Unsets Modified User Id.
     * Modified User Id
     */
    public function unsetModifiedUserId(): void
    {
        $this->modifiedUserId = [];
    }

    /**
     * Converts the ProductRecurring object to a human-readable string representation.
     *
     * @return string The string representation of the ProductRecurring object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'ProductRecurring',
            [
                'title' => $this->title,
                'locationId' => $this->locationId,
                'locationApiId' => $this->getLocationApiId(),
                'sendDeclinedNotifications' => $this->sendDeclinedNotifications,
                'requireFullPayment' => $this->requireFullPayment,
                'expireNotificationEmailEnable' => $this->expireNotificationEmailEnable,
                'expireNotificationSmsEnable' => $this->expireNotificationSmsEnable,
                'notificationDaysDefault' => $this->getNotificationDaysDefault(),
                'id' => $this->id,
                'createdTs' => $this->createdTs,
                'modifiedTs' => $this->modifiedTs,
                'createdUserId' => $this->getCreatedUserId(),
                'modifiedUserId' => $this->getModifiedUserId(),
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->title)) {
            $json['title']                            = $this->title;
        }
        if (isset($this->locationId)) {
            $json['location_id']                      = $this->locationId;
        }
        if (!empty($this->locationApiId)) {
            $json['location_api_id']                  = $this->locationApiId['value'];
        }
        if (isset($this->sendDeclinedNotifications)) {
            $json['send_declined_notifications']      = $this->sendDeclinedNotifications;
        }
        if (isset($this->requireFullPayment)) {
            $json['require_full_payment']             = $this->requireFullPayment;
        }
        if (isset($this->expireNotificationEmailEnable)) {
            $json['expire_notification_email_enable'] = $this->expireNotificationEmailEnable;
        }
        if (isset($this->expireNotificationSmsEnable)) {
            $json['expire_notification_sms_enable']   = $this->expireNotificationSmsEnable;
        }
        if (!empty($this->notificationDaysDefault)) {
            $json['notification_days_default']        = $this->notificationDaysDefault['value'];
        }
        if (isset($this->id)) {
            $json['id']                               = $this->id;
        }
        if (isset($this->createdTs)) {
            $json['created_ts']                       = $this->createdTs;
        }
        if (isset($this->modifiedTs)) {
            $json['modified_ts']                      = $this->modifiedTs;
        }
        if (!empty($this->createdUserId)) {
            $json['created_user_id']                  = $this->createdUserId['value'];
        }
        if (!empty($this->modifiedUserId)) {
            $json['modified_user_id']                 = $this->modifiedUserId['value'];
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

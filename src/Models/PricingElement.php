<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use FortisAPILib\ApiHelper;
use stdClass;

/**
 * Array of pricing items from template to be changed.
 */
class PricingElement implements \JsonSerializable
{
    /**
     * @var int
     */
    private $itemId;

    /**
     * @var float
     */
    private $itemValue;

    /**
     * @var int
     */
    private $itemTerm;

    /**
     * @var array
     */
    private $itemDescription = [];

    /**
     * @param int $itemId
     * @param float $itemValue
     * @param int $itemTerm
     */
    public function __construct(int $itemId, float $itemValue, int $itemTerm)
    {
        $this->itemId = $itemId;
        $this->itemValue = $itemValue;
        $this->itemTerm = $itemTerm;
    }

    /**
     * Returns Item Id.
     * Item ID.
     */
    public function getItemId(): int
    {
        return $this->itemId;
    }

    /**
     * Sets Item Id.
     * Item ID.
     *
     * @required
     * @maps item_id
     */
    public function setItemId(int $itemId): void
    {
        $this->itemId = $itemId;
    }

    /**
     * Returns Item Value.
     * Item value.
     */
    public function getItemValue(): float
    {
        return $this->itemValue;
    }

    /**
     * Sets Item Value.
     * Item value.
     *
     * @required
     * @maps item_value
     */
    public function setItemValue(float $itemValue): void
    {
        $this->itemValue = $itemValue;
    }

    /**
     * Returns Item Term.
     * Item term.
     */
    public function getItemTerm(): int
    {
        return $this->itemTerm;
    }

    /**
     * Sets Item Term.
     * Item term.
     *
     * @required
     * @maps item_term
     */
    public function setItemTerm(int $itemTerm): void
    {
        $this->itemTerm = $itemTerm;
    }

    /**
     * Returns Item Description.
     * Item desciption.
     */
    public function getItemDescription(): ?string
    {
        if (count($this->itemDescription) == 0) {
            return null;
        }
        return $this->itemDescription['value'];
    }

    /**
     * Sets Item Description.
     * Item desciption.
     *
     * @maps item_description
     */
    public function setItemDescription(?string $itemDescription): void
    {
        $this->itemDescription['value'] = $itemDescription;
    }

    /**
     * Unsets Item Description.
     * Item desciption.
     */
    public function unsetItemDescription(): void
    {
        $this->itemDescription = [];
    }

    /**
     * Converts the PricingElement object to a human-readable string representation.
     *
     * @return string The string representation of the PricingElement object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'PricingElement',
            [
                'itemId' => $this->itemId,
                'itemValue' => $this->itemValue,
                'itemTerm' => $this->itemTerm,
                'itemDescription' => $this->getItemDescription(),
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['item_id']              = $this->itemId;
        $json['item_value']           = $this->itemValue;
        $json['item_term']            = $this->itemTerm;
        if (!empty($this->itemDescription)) {
            $json['item_description'] = $this->itemDescription['value'];
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

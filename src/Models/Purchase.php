<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use FortisAPILib\ApiHelper;
use stdClass;

/**
 * Contains purchase information
 */
class Purchase implements \JsonSerializable
{
    /**
     * @var int|null
     */
    private $purchaseInstallData;

    /**
     * @var MerchantRiskIndicator|null
     */
    private $merchantRiskIndicator;

    /**
     * @var int|null
     */
    private $purchaseAmount;

    /**
     * @var string|null
     */
    private $purchaseCurrency;

    /**
     * @var int|null
     */
    private $purchaseExponent;

    /**
     * @var string|null
     */
    private $purchaseDate;

    /**
     * @var string|null
     */
    private $recurringExpiry;

    /**
     * @var int|null
     */
    private $recurringFrequency;

    /**
     * @var string|null
     */
    private $transactionType;

    /**
     * @var int|null
     */
    private $recurringAmount;

    /**
     * @var string|null
     */
    private $recurringCurrency;

    /**
     * @var int|null
     */
    private $recurringExponent;

    /**
     * @var string|null
     */
    private $recurringDate;

    /**
     * @var string|null
     */
    private $amountInd;

    /**
     * @var string|null
     */
    private $frequencyInd;

    /**
     * Returns Purchase Install Data.
     * Indicates the maximum number of authorizations permitted for installment payments.
     *
     * The fields is required if the Merchant and Cardholder have agreed to installment payments, i.e. if
     * 3DS Requestor Authentication Indicator = 03. Omitted if not an installment payment authentication.
     *
     * Starting from EMV 3DS 2.3.1:
     * Additionally this field is required for device_channel = 03 (3RI) if three_ri_ind = 02.
     */
    public function getPurchaseInstallData(): ?int
    {
        return $this->purchaseInstallData;
    }

    /**
     * Sets Purchase Install Data.
     * Indicates the maximum number of authorizations permitted for installment payments.
     *
     * The fields is required if the Merchant and Cardholder have agreed to installment payments, i.e. if
     * 3DS Requestor Authentication Indicator = 03. Omitted if not an installment payment authentication.
     *
     * Starting from EMV 3DS 2.3.1:
     * Additionally this field is required for device_channel = 03 (3RI) if three_ri_ind = 02.
     *
     * @maps purchase_install_data
     */
    public function setPurchaseInstallData(?int $purchaseInstallData): void
    {
        $this->purchaseInstallData = $purchaseInstallData;
    }

    /**
     * Returns Merchant Risk Indicator.
     * Contains purchase information
     */
    public function getMerchantRiskIndicator(): ?MerchantRiskIndicator
    {
        return $this->merchantRiskIndicator;
    }

    /**
     * Sets Merchant Risk Indicator.
     * Contains purchase information
     *
     * @maps merchant_risk_indicator
     */
    public function setMerchantRiskIndicator(?MerchantRiskIndicator $merchantRiskIndicator): void
    {
        $this->merchantRiskIndicator = $merchantRiskIndicator;
    }

    /**
     * Returns Purchase Amount.
     * Purchase amount in minor units of currency with all punctuation removed. When used in conjunction
     * with the Purchase Currency Exponent field, proper punctuation can be calculated. Example: If the
     * purchase amount is USD 123.45, element will contain the value 12345. The field is limited to maximum
     * 48 characters.
     *
     * This field is required for 02-NPA message category if 3DS Requestor Authentication Indicator = 02 or
     * 03.
     * This field is always required for message_category = 01 (PA).
     *
     * Starting from EMV 3DS 2.3.1:
     * Additionally this field is required for message_category = 02-NPA if three_ri_ind = 01, 02, 06, 07,
     * 08, 09, or 11.
     */
    public function getPurchaseAmount(): ?int
    {
        return $this->purchaseAmount;
    }

    /**
     * Sets Purchase Amount.
     * Purchase amount in minor units of currency with all punctuation removed. When used in conjunction
     * with the Purchase Currency Exponent field, proper punctuation can be calculated. Example: If the
     * purchase amount is USD 123.45, element will contain the value 12345. The field is limited to maximum
     * 48 characters.
     *
     * This field is required for 02-NPA message category if 3DS Requestor Authentication Indicator = 02 or
     * 03.
     * This field is always required for message_category = 01 (PA).
     *
     * Starting from EMV 3DS 2.3.1:
     * Additionally this field is required for message_category = 02-NPA if three_ri_ind = 01, 02, 06, 07,
     * 08, 09, or 11.
     *
     * @maps purchase_amount
     */
    public function setPurchaseAmount(?int $purchaseAmount): void
    {
        $this->purchaseAmount = $purchaseAmount;
    }

    /**
     * Returns Purchase Currency.
     * Currency in which purchase amount is expressed. The value is limited to 3 numeric characters and is
     * represented by the ISO 4217 three-digit currency code, except 955-964 and 999.
     *
     * This field is always required for message_category = 01-PA.
     * It is required for message_category = 02-NPA if 3DS Requestor Authentication Indicator = 02 or 03.
     *
     * Starting from EMV 3DS 2.3.1:
     * Additionally this field is required for message_category = 02-NPA if three_ri_ind = 01, 02, 06, 07,
     * 08, 09, or 11.
     */
    public function getPurchaseCurrency(): ?string
    {
        return $this->purchaseCurrency;
    }

    /**
     * Sets Purchase Currency.
     * Currency in which purchase amount is expressed. The value is limited to 3 numeric characters and is
     * represented by the ISO 4217 three-digit currency code, except 955-964 and 999.
     *
     * This field is always required for message_category = 01-PA.
     * It is required for message_category = 02-NPA if 3DS Requestor Authentication Indicator = 02 or 03.
     *
     * Starting from EMV 3DS 2.3.1:
     * Additionally this field is required for message_category = 02-NPA if three_ri_ind = 01, 02, 06, 07,
     * 08, 09, or 11.
     *
     * @maps purchase_currency
     */
    public function setPurchaseCurrency(?string $purchaseCurrency): void
    {
        $this->purchaseCurrency = $purchaseCurrency;
    }

    /**
     * Returns Purchase Exponent.
     * Minor units of currency as specified in the ISO 4217 currency exponent. The field is limited to 1
     * character.
     *
     * This field is always required for message_category = 01-PA.
     * It is required for message_category = 02-NPA if 3DS Requestor Authentication Indicator = 02 or 03.
     *
     * Example: for currency USD the exponent should be 2, and for Yen the exponent should be 0.
     *
     * Starting from EMV 3DS 2.3.1:
     * Additionally this field is required for message_category = 02-NPA if three_ri_ind = 01, 02, 06, 07,
     * 08, 09, or 11.
     */
    public function getPurchaseExponent(): ?int
    {
        return $this->purchaseExponent;
    }

    /**
     * Sets Purchase Exponent.
     * Minor units of currency as specified in the ISO 4217 currency exponent. The field is limited to 1
     * character.
     *
     * This field is always required for message_category = 01-PA.
     * It is required for message_category = 02-NPA if 3DS Requestor Authentication Indicator = 02 or 03.
     *
     * Example: for currency USD the exponent should be 2, and for Yen the exponent should be 0.
     *
     * Starting from EMV 3DS 2.3.1:
     * Additionally this field is required for message_category = 02-NPA if three_ri_ind = 01, 02, 06, 07,
     * 08, 09, or 11.
     *
     * @maps purchase_exponent
     */
    public function setPurchaseExponent(?int $purchaseExponent): void
    {
        $this->purchaseExponent = $purchaseExponent;
    }

    /**
     * Returns Purchase Date.
     * Date and time of the purchase, converted into UTC. The field is limited to 14 characters, formatted
     * as YYYYMMDDHHMMSS.
     *
     * This field is always required for message_category = 01-PA.
     * It is required for message_category = 02-NPA if 3DS Requestor Authentication Indicator = 02 or 03.
     *
     * Starting from EMV 3DS 2.3.1:
     * Additionally this field is required for message_category = 02-NPA if three_ri_ind = 01, 02, 06, 07,
     * 08, 09, or 11.
     */
    public function getPurchaseDate(): ?string
    {
        return $this->purchaseDate;
    }

    /**
     * Sets Purchase Date.
     * Date and time of the purchase, converted into UTC. The field is limited to 14 characters, formatted
     * as YYYYMMDDHHMMSS.
     *
     * This field is always required for message_category = 01-PA.
     * It is required for message_category = 02-NPA if 3DS Requestor Authentication Indicator = 02 or 03.
     *
     * Starting from EMV 3DS 2.3.1:
     * Additionally this field is required for message_category = 02-NPA if three_ri_ind = 01, 02, 06, 07,
     * 08, 09, or 11.
     *
     * @maps purchase_date
     */
    public function setPurchaseDate(?string $purchaseDate): void
    {
        $this->purchaseDate = $purchaseDate;
    }

    /**
     * Returns Recurring Expiry.
     * Date after which no further authorizations shall be performed. This field is limited to 8 characters,
     * and the accepted format is YYYYMMDD.
     *
     * This field is required if 3DS Requestor Authentication Indicator = 02 or 03 and message_category =
     * 01 or 02. Required if there is an end date.
     */
    public function getRecurringExpiry(): ?string
    {
        return $this->recurringExpiry;
    }

    /**
     * Sets Recurring Expiry.
     * Date after which no further authorizations shall be performed. This field is limited to 8 characters,
     * and the accepted format is YYYYMMDD.
     *
     * This field is required if 3DS Requestor Authentication Indicator = 02 or 03 and message_category =
     * 01 or 02. Required if there is an end date.
     *
     * @maps recurring_expiry
     */
    public function setRecurringExpiry(?string $recurringExpiry): void
    {
        $this->recurringExpiry = $recurringExpiry;
    }

    /**
     * Returns Recurring Frequency.
     * Indicates the minimum number of days between authorizations.
     *
     * This field is required if 3DS Requestor Authentication Indicator = 02 or 03 and frequency_ind = 01.
     */
    public function getRecurringFrequency(): ?int
    {
        return $this->recurringFrequency;
    }

    /**
     * Sets Recurring Frequency.
     * Indicates the minimum number of days between authorizations.
     *
     * This field is required if 3DS Requestor Authentication Indicator = 02 or 03 and frequency_ind = 01.
     *
     * @maps recurring_frequency
     */
    public function setRecurringFrequency(?int $recurringFrequency): void
    {
        $this->recurringFrequency = $recurringFrequency;
    }

    /**
     * Returns Transaction Type.
     * Identifies the type of transaction being authenticated. The values are derived from ISO 8583. This
     * field is required in some markets. Otherwise, the field is optional.
     * >01 - Goods / Service purchase
     * >
     * >03 - Check Acceptance
     * >
     * >10 - Account Funding
     * >
     * >11 - Quasi-Cash Transaction
     * >
     * >28 - Prepaid activation and Loan
     * >
     */
    public function getTransactionType(): ?string
    {
        return $this->transactionType;
    }

    /**
     * Sets Transaction Type.
     * Identifies the type of transaction being authenticated. The values are derived from ISO 8583. This
     * field is required in some markets. Otherwise, the field is optional.
     * >01 - Goods / Service purchase
     * >
     * >03 - Check Acceptance
     * >
     * >10 - Account Funding
     * >
     * >11 - Quasi-Cash Transaction
     * >
     * >28 - Prepaid activation and Loan
     * >
     *
     * @maps transaction_type
     * @factory \FortisAPILib\Models\TransactionTypeEnum::checkValue
     */
    public function setTransactionType(?string $transactionType): void
    {
        $this->transactionType = $transactionType;
    }

    /**
     * Returns Recurring Amount.
     * Recurring amount after first/promotional payment in minor units of currency with all punctuation
     * removed. Example: If the recurring amount is USD 123.45, element will contain the value 12345. The
     * field is limited to maximum 48 characters.
     *
     * The field is required if three_ds_requestor_authentication_ind = 02 or 03 AND three_ri_iInd = 01 or
     * 02 AND amount_ind = 01.
     * Available for supporting EMV 3DS 2.3.1 and later versions.
     */
    public function getRecurringAmount(): ?int
    {
        return $this->recurringAmount;
    }

    /**
     * Sets Recurring Amount.
     * Recurring amount after first/promotional payment in minor units of currency with all punctuation
     * removed. Example: If the recurring amount is USD 123.45, element will contain the value 12345. The
     * field is limited to maximum 48 characters.
     *
     * The field is required if three_ds_requestor_authentication_ind = 02 or 03 AND three_ri_iInd = 01 or
     * 02 AND amount_ind = 01.
     * Available for supporting EMV 3DS 2.3.1 and later versions.
     *
     * @maps recurring_amount
     */
    public function setRecurringAmount(?int $recurringAmount): void
    {
        $this->recurringAmount = $recurringAmount;
    }

    /**
     * Returns Recurring Currency.
     * Currency in which recurring amount is expressed. The value is limited to 3 numeric characters and is
     * represented by the ISO 4217 three-digit currency code, except 955-964 and 999.
     *
     * This field is required if recurring_amount is present.
     * Available for supporting EMV 3DS 2.3.1 and later versions.
     */
    public function getRecurringCurrency(): ?string
    {
        return $this->recurringCurrency;
    }

    /**
     * Sets Recurring Currency.
     * Currency in which recurring amount is expressed. The value is limited to 3 numeric characters and is
     * represented by the ISO 4217 three-digit currency code, except 955-964 and 999.
     *
     * This field is required if recurring_amount is present.
     * Available for supporting EMV 3DS 2.3.1 and later versions.
     *
     * @maps recurring_currency
     */
    public function setRecurringCurrency(?string $recurringCurrency): void
    {
        $this->recurringCurrency = $recurringCurrency;
    }

    /**
     * Returns Recurring Exponent.
     * Minor units of currency as specified in the ISO 4217 currency exponent. Example: USD = 2, Yen = 0.
     * The value is limited to 1 numeric character.
     *
     * This field is required if recurring_amount is present.
     * Available for supporting EMV 3DS 2.3.1 and later versions.
     */
    public function getRecurringExponent(): ?int
    {
        return $this->recurringExponent;
    }

    /**
     * Sets Recurring Exponent.
     * Minor units of currency as specified in the ISO 4217 currency exponent. Example: USD = 2, Yen = 0.
     * The value is limited to 1 numeric character.
     *
     * This field is required if recurring_amount is present.
     * Available for supporting EMV 3DS 2.3.1 and later versions.
     *
     * @maps recurring_exponent
     */
    public function setRecurringExponent(?int $recurringExponent): void
    {
        $this->recurringExponent = $recurringExponent;
    }

    /**
     * Returns Recurring Date.
     * Effective date of new authorized amount following first/promotional payment in recurring transaction.
     * The value is limited to 8 characters. Accepted format: YYYYMMDD.
     *
     * This field is required if frequency_ind = 01.
     * Available for supporting EMV 3DS 2.3.1 and later versions.
     */
    public function getRecurringDate(): ?string
    {
        return $this->recurringDate;
    }

    /**
     * Sets Recurring Date.
     * Effective date of new authorized amount following first/promotional payment in recurring transaction.
     * The value is limited to 8 characters. Accepted format: YYYYMMDD.
     *
     * This field is required if frequency_ind = 01.
     * Available for supporting EMV 3DS 2.3.1 and later versions.
     *
     * @maps recurring_date
     */
    public function setRecurringDate(?string $recurringDate): void
    {
        $this->recurringDate = $recurringDate;
    }

    /**
     * Returns Amount Ind.
     * Part of the indication whether the recurring or installment payment has a fixed or variable amount.
     *
     * Starting from EMV 3DS 2.3.1:
     * This field is required if three_ds_requestor.three_ds_requestor_authentication_ind = 02 or 03.
     * This field is required if three_ri_ind= 01 or 02.
     * >01 - Fixed Purchase Amount
     * >
     * >02 - Variable Purchase Amount
     * >
     * >03 through 79 - Reserved for EMVCo future use (values invalid until defined by EMVCo)
     * >
     * >80 through 99 - PS-specific value (dependent on the payment scheme type)
     * >
     */
    public function getAmountInd(): ?string
    {
        return $this->amountInd;
    }

    /**
     * Sets Amount Ind.
     * Part of the indication whether the recurring or installment payment has a fixed or variable amount.
     *
     * Starting from EMV 3DS 2.3.1:
     * This field is required if three_ds_requestor.three_ds_requestor_authentication_ind = 02 or 03.
     * This field is required if three_ri_ind= 01 or 02.
     * >01 - Fixed Purchase Amount
     * >
     * >02 - Variable Purchase Amount
     * >
     * >03 through 79 - Reserved for EMVCo future use (values invalid until defined by EMVCo)
     * >
     * >80 through 99 - PS-specific value (dependent on the payment scheme type)
     * >
     *
     * @maps amount_ind
     * @factory \FortisAPILib\Models\AmountIndEnum::checkValue
     */
    public function setAmountInd(?string $amountInd): void
    {
        $this->amountInd = $amountInd;
    }

    /**
     * Returns Frequency Ind.
     * Part of the indication whether the recurring or instalment payment has a fixed or variable frequency.
     *
     * Starting from EMV 3DS 2.3.1:
     * This field is required if three_ds_requestor.three_ds_requestor_authentication_ind = 02 or 03.
     * This field is required if three_ri_ind= 01 or 02.
     */
    public function getFrequencyInd(): ?string
    {
        return $this->frequencyInd;
    }

    /**
     * Sets Frequency Ind.
     * Part of the indication whether the recurring or instalment payment has a fixed or variable frequency.
     *
     * Starting from EMV 3DS 2.3.1:
     * This field is required if three_ds_requestor.three_ds_requestor_authentication_ind = 02 or 03.
     * This field is required if three_ri_ind= 01 or 02.
     *
     * @maps frequency_ind
     */
    public function setFrequencyInd(?string $frequencyInd): void
    {
        $this->frequencyInd = $frequencyInd;
    }

    /**
     * Converts the Purchase object to a human-readable string representation.
     *
     * @return string The string representation of the Purchase object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'Purchase',
            [
                'purchaseInstallData' => $this->purchaseInstallData,
                'merchantRiskIndicator' => $this->merchantRiskIndicator,
                'purchaseAmount' => $this->purchaseAmount,
                'purchaseCurrency' => $this->purchaseCurrency,
                'purchaseExponent' => $this->purchaseExponent,
                'purchaseDate' => $this->purchaseDate,
                'recurringExpiry' => $this->recurringExpiry,
                'recurringFrequency' => $this->recurringFrequency,
                'transactionType' => $this->transactionType,
                'recurringAmount' => $this->recurringAmount,
                'recurringCurrency' => $this->recurringCurrency,
                'recurringExponent' => $this->recurringExponent,
                'recurringDate' => $this->recurringDate,
                'amountInd' => $this->amountInd,
                'frequencyInd' => $this->frequencyInd,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->purchaseInstallData)) {
            $json['purchase_install_data']   = $this->purchaseInstallData;
        }
        if (isset($this->merchantRiskIndicator)) {
            $json['merchant_risk_indicator'] = $this->merchantRiskIndicator;
        }
        if (isset($this->purchaseAmount)) {
            $json['purchase_amount']         = $this->purchaseAmount;
        }
        if (isset($this->purchaseCurrency)) {
            $json['purchase_currency']       = $this->purchaseCurrency;
        }
        if (isset($this->purchaseExponent)) {
            $json['purchase_exponent']       = $this->purchaseExponent;
        }
        if (isset($this->purchaseDate)) {
            $json['purchase_date']           = $this->purchaseDate;
        }
        if (isset($this->recurringExpiry)) {
            $json['recurring_expiry']        = $this->recurringExpiry;
        }
        if (isset($this->recurringFrequency)) {
            $json['recurring_frequency']     = $this->recurringFrequency;
        }
        if (isset($this->transactionType)) {
            $json['transaction_type']        = TransactionTypeEnum::checkValue($this->transactionType);
        }
        if (isset($this->recurringAmount)) {
            $json['recurring_amount']        = $this->recurringAmount;
        }
        if (isset($this->recurringCurrency)) {
            $json['recurring_currency']      = $this->recurringCurrency;
        }
        if (isset($this->recurringExponent)) {
            $json['recurring_exponent']      = $this->recurringExponent;
        }
        if (isset($this->recurringDate)) {
            $json['recurring_date']          = $this->recurringDate;
        }
        if (isset($this->amountInd)) {
            $json['amount_ind']              = AmountIndEnum::checkValue($this->amountInd);
        }
        if (isset($this->frequencyInd)) {
            $json['frequency_ind']           = $this->frequencyInd;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use FortisAPILib\ApiHelper;
use stdClass;

/**
 * Batch Risk Config
 */
class BatchRiskConfig implements \JsonSerializable
{
    /**
     * @var array
     */
    private $blindRefundTotalCount = [];

    /**
     * @var array
     */
    private $blindRefundMaxAmount = [];

    /**
     * Returns Blind Refund Total Count.
     * Blind Refund Total Count
     */
    public function getBlindRefundTotalCount(): ?int
    {
        if (count($this->blindRefundTotalCount) == 0) {
            return null;
        }
        return $this->blindRefundTotalCount['value'];
    }

    /**
     * Sets Blind Refund Total Count.
     * Blind Refund Total Count
     *
     * @maps blind_refund_total_count
     */
    public function setBlindRefundTotalCount(?int $blindRefundTotalCount): void
    {
        $this->blindRefundTotalCount['value'] = $blindRefundTotalCount;
    }

    /**
     * Unsets Blind Refund Total Count.
     * Blind Refund Total Count
     */
    public function unsetBlindRefundTotalCount(): void
    {
        $this->blindRefundTotalCount = [];
    }

    /**
     * Returns Blind Refund Max Amount.
     * Blind Refund Max Amount
     */
    public function getBlindRefundMaxAmount(): ?int
    {
        if (count($this->blindRefundMaxAmount) == 0) {
            return null;
        }
        return $this->blindRefundMaxAmount['value'];
    }

    /**
     * Sets Blind Refund Max Amount.
     * Blind Refund Max Amount
     *
     * @maps blind_refund_max_amount
     */
    public function setBlindRefundMaxAmount(?int $blindRefundMaxAmount): void
    {
        $this->blindRefundMaxAmount['value'] = $blindRefundMaxAmount;
    }

    /**
     * Unsets Blind Refund Max Amount.
     * Blind Refund Max Amount
     */
    public function unsetBlindRefundMaxAmount(): void
    {
        $this->blindRefundMaxAmount = [];
    }

    /**
     * Converts the BatchRiskConfig object to a human-readable string representation.
     *
     * @return string The string representation of the BatchRiskConfig object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'BatchRiskConfig',
            [
                'blindRefundTotalCount' => $this->getBlindRefundTotalCount(),
                'blindRefundMaxAmount' => $this->getBlindRefundMaxAmount(),
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (!empty($this->blindRefundTotalCount)) {
            $json['blind_refund_total_count'] = $this->blindRefundTotalCount['value'];
        }
        if (!empty($this->blindRefundMaxAmount)) {
            $json['blind_refund_max_amount']  = $this->blindRefundMaxAmount['value'];
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

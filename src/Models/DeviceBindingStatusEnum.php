<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use Core\Utils\CoreHelper;
use Exception;
use stdClass;

/**
 * Enables the communication of Device Binding Status between the ACS, the DS and the 3DS Requestor.
 * For bound devices (value = 11â€“14), Device Binding Status also conveys the type of binding that was
 * performed.
 * >01 - Device is not bound by Cardholder
 * >
 * >02 - Not eligible as determined by Issuer
 * >
 * >03 - Pending confirmation by Cardholder
 * >
 * >04 - Cardholder rejected
 * >
 * >05 - Device Binding Status unknown, unavailable, or does not apply
 * >
 * >06 through 10 - Reserved for EMVCo future use (values invalid until defined by EMVCo)
 * >
 * >11 - Device is bound by Cardholder (device is bound using hardware / SIM internal to the Consumer
 * Device. For instance, keys stored in a secure element on the device)
 * >
 * >12 - Device is bound by Cardholder (device is bound using hardware external to the Consumer Device.
 * For example, an external FIDO Authenticator
 * >
 * >13 - Device is bound by Cardholder (device is bound using data that includes dynamically generated
 * data and could include a unique device ID)
 * >
 * >14 - Device is bound by Cardholder (device is bound using static device data that has been obtained
 * from the Consumer Device
 * >
 * >15 - Device is bound by Cardholder (Other method)
 * >
 * >16 through 79 - Reserved for EMVCo future use (values invalid until defined by EMVCo)
 * >
 * >80 through 99 - Reserved for DS use
 * >
 */
class DeviceBindingStatusEnum
{
    public const ENUM_01 = '01';

    public const ENUM_02 = '02';

    public const ENUM_03 = '03';

    public const ENUM_04 = '04';

    public const ENUM_05 = '05';

    public const ENUM_06 = '06';

    public const ENUM_07 = '07';

    public const ENUM_08 = '08';

    public const ENUM_09 = '09';

    public const ENUM_10 = '10';

    public const ENUM_11 = '11';

    public const ENUM_12 = '12';

    public const ENUM_13 = '13';

    public const ENUM_14 = '14';

    public const ENUM_15 = '15';

    public const ENUM_16 = '16';

    public const ENUM_17 = '17';

    public const ENUM_18 = '18';

    public const ENUM_19 = '19';

    public const ENUM_20 = '20';

    public const ENUM_21 = '21';

    public const ENUM_22 = '22';

    public const ENUM_23 = '23';

    public const ENUM_24 = '24';

    public const ENUM_25 = '25';

    public const ENUM_26 = '26';

    public const ENUM_27 = '27';

    public const ENUM_28 = '28';

    public const ENUM_29 = '29';

    public const ENUM_30 = '30';

    public const ENUM_31 = '31';

    public const ENUM_32 = '32';

    public const ENUM_33 = '33';

    public const ENUM_34 = '34';

    public const ENUM_35 = '35';

    public const ENUM_36 = '36';

    public const ENUM_37 = '37';

    public const ENUM_38 = '38';

    public const ENUM_39 = '39';

    public const ENUM_40 = '40';

    public const ENUM_41 = '41';

    public const ENUM_42 = '42';

    public const ENUM_43 = '43';

    public const ENUM_44 = '44';

    public const ENUM_45 = '45';

    public const ENUM_46 = '46';

    public const ENUM_47 = '47';

    public const ENUM_48 = '48';

    public const ENUM_49 = '49';

    public const ENUM_50 = '50';

    public const ENUM_51 = '51';

    public const ENUM_52 = '52';

    public const ENUM_53 = '53';

    public const ENUM_54 = '54';

    public const ENUM_55 = '55';

    public const ENUM_56 = '56';

    public const ENUM_57 = '57';

    public const ENUM_58 = '58';

    public const ENUM_59 = '59';

    public const ENUM_60 = '60';

    public const ENUM_61 = '61';

    public const ENUM_62 = '62';

    public const ENUM_63 = '63';

    public const ENUM_64 = '64';

    public const ENUM_65 = '65';

    public const ENUM_66 = '66';

    public const ENUM_67 = '67';

    public const ENUM_68 = '68';

    public const ENUM_69 = '69';

    public const ENUM_70 = '70';

    public const ENUM_71 = '71';

    public const ENUM_72 = '72';

    public const ENUM_73 = '73';

    public const ENUM_74 = '74';

    public const ENUM_75 = '75';

    public const ENUM_76 = '76';

    public const ENUM_77 = '77';

    public const ENUM_78 = '78';

    public const ENUM_79 = '79';

    public const ENUM_80 = '80';

    public const ENUM_81 = '81';

    public const ENUM_82 = '82';

    public const ENUM_83 = '83';

    public const ENUM_84 = '84';

    public const ENUM_85 = '85';

    public const ENUM_86 = '86';

    public const ENUM_87 = '87';

    public const ENUM_88 = '88';

    public const ENUM_89 = '89';

    public const ENUM_90 = '90';

    public const ENUM_91 = '91';

    public const ENUM_92 = '92';

    public const ENUM_93 = '93';

    public const ENUM_94 = '94';

    public const ENUM_95 = '95';

    public const ENUM_96 = '96';

    public const ENUM_97 = '97';

    public const ENUM_98 = '98';

    public const ENUM_99 = '99';

    private const _ALL_VALUES = [
        self::ENUM_01,
        self::ENUM_02,
        self::ENUM_03,
        self::ENUM_04,
        self::ENUM_05,
        self::ENUM_06,
        self::ENUM_07,
        self::ENUM_08,
        self::ENUM_09,
        self::ENUM_10,
        self::ENUM_11,
        self::ENUM_12,
        self::ENUM_13,
        self::ENUM_14,
        self::ENUM_15,
        self::ENUM_16,
        self::ENUM_17,
        self::ENUM_18,
        self::ENUM_19,
        self::ENUM_20,
        self::ENUM_21,
        self::ENUM_22,
        self::ENUM_23,
        self::ENUM_24,
        self::ENUM_25,
        self::ENUM_26,
        self::ENUM_27,
        self::ENUM_28,
        self::ENUM_29,
        self::ENUM_30,
        self::ENUM_31,
        self::ENUM_32,
        self::ENUM_33,
        self::ENUM_34,
        self::ENUM_35,
        self::ENUM_36,
        self::ENUM_37,
        self::ENUM_38,
        self::ENUM_39,
        self::ENUM_40,
        self::ENUM_41,
        self::ENUM_42,
        self::ENUM_43,
        self::ENUM_44,
        self::ENUM_45,
        self::ENUM_46,
        self::ENUM_47,
        self::ENUM_48,
        self::ENUM_49,
        self::ENUM_50,
        self::ENUM_51,
        self::ENUM_52,
        self::ENUM_53,
        self::ENUM_54,
        self::ENUM_55,
        self::ENUM_56,
        self::ENUM_57,
        self::ENUM_58,
        self::ENUM_59,
        self::ENUM_60,
        self::ENUM_61,
        self::ENUM_62,
        self::ENUM_63,
        self::ENUM_64,
        self::ENUM_65,
        self::ENUM_66,
        self::ENUM_67,
        self::ENUM_68,
        self::ENUM_69,
        self::ENUM_70,
        self::ENUM_71,
        self::ENUM_72,
        self::ENUM_73,
        self::ENUM_74,
        self::ENUM_75,
        self::ENUM_76,
        self::ENUM_77,
        self::ENUM_78,
        self::ENUM_79,
        self::ENUM_80,
        self::ENUM_81,
        self::ENUM_82,
        self::ENUM_83,
        self::ENUM_84,
        self::ENUM_85,
        self::ENUM_86,
        self::ENUM_87,
        self::ENUM_88,
        self::ENUM_89,
        self::ENUM_90,
        self::ENUM_91,
        self::ENUM_92,
        self::ENUM_93,
        self::ENUM_94,
        self::ENUM_95,
        self::ENUM_96,
        self::ENUM_97,
        self::ENUM_98,
        self::ENUM_99
    ];

    /**
     * Ensures that all the given values are present in this Enum.
     *
     * @param array|stdClass|null|string $value Value or a list/map of values to be checked
     *
     * @return array|null|string Input value(s), if all are a part of this Enum
     *
     * @throws Exception Throws exception if any given value is not in this Enum
     */
    public static function checkValue($value)
    {
        $value = json_decode(json_encode($value), true); // converts stdClass into array
        if (CoreHelper::checkValueOrValuesInList($value, self::_ALL_VALUES)) {
            return $value;
        }
        throw new Exception("$value is invalid for DeviceBindingStatusEnum.");
    }
}

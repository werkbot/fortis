<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use Core\Utils\CoreHelper;
use Exception;
use stdClass;

/**
 * Mechanism used by the Cardholder to authenticate to the 3DS Requestor. "07" and "08" are accepted as
 * well if 3DS Server initiates authentication with EMV 3DS 2.2.0 version or greater (required protocol
 * version can be set in the preferred_protocol_version field)
 * >01 - No 3DS Requestor authentication occurred (i.e. cardholder "logged in" as guest)
 * >
 * >02 - Login to the cardholder account at the 3DS Requestor system using 3DS Requestor's own
 * credentials
 * >
 * >03 - Login to the cardholder account at the 3DS Requestor system using federated ID
 * >
 * >04 - Login to the cardholder account at the 3DS Requestor system using issuer credentials
 * >
 * >05 - Login to the cardholder account at the 3DS Requestor system using third-party authentication
 * >
 * >06 - Login to the cardholder account at the 3DS Requestor system using FIDO Authenticator
 * >
 * >07 - Login to the cardholder account at the 3DS Requestor system using FIDO Authenticator (FIDO
 * assurance data signed) (EMV 3DS 2.2.0 version or greater)
 * >
 * >08 - SRC Assurance Data (EMV 3DS 2.2.0 version or greater)
 * >
 * >80 through 99 - can be used for PS-specific values, regardless of protocol version
 * >
 */
class ThreeDsReqAuthMethodEnum
{
    public const ENUM_01 = '01';

    public const ENUM_02 = '02';

    public const ENUM_03 = '03';

    public const ENUM_04 = '04';

    public const ENUM_05 = '05';

    public const ENUM_06 = '06';

    public const ENUM_07 = '07';

    public const ENUM_08 = '08';

    public const ENUM_80 = '80';

    public const ENUM_81 = '81';

    public const ENUM_82 = '82';

    public const ENUM_83 = '83';

    public const ENUM_84 = '84';

    public const ENUM_85 = '85';

    public const ENUM_86 = '86';

    public const ENUM_87 = '87';

    public const ENUM_88 = '88';

    public const ENUM_89 = '89';

    public const ENUM_90 = '90';

    public const ENUM_91 = '91';

    public const ENUM_92 = '92';

    public const ENUM_93 = '93';

    public const ENUM_94 = '94';

    public const ENUM_95 = '95';

    public const ENUM_96 = '96';

    public const ENUM_97 = '97';

    public const ENUM_98 = '98';

    public const ENUM_99 = '99';

    private const _ALL_VALUES = [
        self::ENUM_01,
        self::ENUM_02,
        self::ENUM_03,
        self::ENUM_04,
        self::ENUM_05,
        self::ENUM_06,
        self::ENUM_07,
        self::ENUM_08,
        self::ENUM_80,
        self::ENUM_81,
        self::ENUM_82,
        self::ENUM_83,
        self::ENUM_84,
        self::ENUM_85,
        self::ENUM_86,
        self::ENUM_87,
        self::ENUM_88,
        self::ENUM_89,
        self::ENUM_90,
        self::ENUM_91,
        self::ENUM_92,
        self::ENUM_93,
        self::ENUM_94,
        self::ENUM_95,
        self::ENUM_96,
        self::ENUM_97,
        self::ENUM_98,
        self::ENUM_99
    ];

    /**
     * Ensures that all the given values are present in this Enum.
     *
     * @param array|stdClass|null|string $value Value or a list/map of values to be checked
     *
     * @return array|null|string Input value(s), if all are a part of this Enum
     *
     * @throws Exception Throws exception if any given value is not in this Enum
     */
    public static function checkValue($value)
    {
        $value = json_decode(json_encode($value), true); // converts stdClass into array
        if (CoreHelper::checkValueOrValuesInList($value, self::_ALL_VALUES)) {
            return $value;
        }
        throw new Exception("$value is invalid for ThreeDsReqAuthMethodEnum.");
    }
}

<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use FortisAPILib\ApiHelper;
use stdClass;

/**
 * Additional transaction information in case of multiple transactions or merchants.
 *
 * Available for supporting EMV 3DS 2.3.1 and later versions.
 */
class MultiTransaction implements \JsonSerializable
{
    /**
     * @var MerchantList[]
     */
    private $merchantList;

    /**
     * @var int|null
     */
    private $avValidityTime;

    /**
     * @var int|null
     */
    private $avNumberUse;

    /**
     * @param MerchantList[] $merchantList
     */
    public function __construct(array $merchantList)
    {
        $this->merchantList = $merchantList;
    }

    /**
     * Returns Merchant List.
     * Contains the details of each merchant involved in the transaction
     *
     * @return MerchantList[]
     */
    public function getMerchantList(): array
    {
        return $this->merchantList;
    }

    /**
     * Sets Merchant List.
     * Contains the details of each merchant involved in the transaction
     *
     * @required
     * @maps merchant_list
     *
     * @param MerchantList[] $merchantList
     */
    public function setMerchantList(array $merchantList): void
    {
        $this->merchantList = $merchantList;
    }

    /**
     * Returns Av Validity Time.
     * Number of days that the AV (Authentication Value) is valid.
     */
    public function getAvValidityTime(): ?int
    {
        return $this->avValidityTime;
    }

    /**
     * Sets Av Validity Time.
     * Number of days that the AV (Authentication Value) is valid.
     *
     * @maps av_validity_time
     */
    public function setAvValidityTime(?int $avValidityTime): void
    {
        $this->avValidityTime = $avValidityTime;
    }

    /**
     * Returns Av Number Use.
     * Number of times that the AV (Authentication Value) is valid.
     */
    public function getAvNumberUse(): ?int
    {
        return $this->avNumberUse;
    }

    /**
     * Sets Av Number Use.
     * Number of times that the AV (Authentication Value) is valid.
     *
     * @maps av_number_use
     */
    public function setAvNumberUse(?int $avNumberUse): void
    {
        $this->avNumberUse = $avNumberUse;
    }

    /**
     * Converts the MultiTransaction object to a human-readable string representation.
     *
     * @return string The string representation of the MultiTransaction object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'MultiTransaction',
            [
                'merchantList' => $this->merchantList,
                'avValidityTime' => $this->avValidityTime,
                'avNumberUse' => $this->avNumberUse,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        $json['merchant_list']        = $this->merchantList;
        if (isset($this->avValidityTime)) {
            $json['av_validity_time'] = $this->avValidityTime;
        }
        if (isset($this->avNumberUse)) {
            $json['av_number_use']    = $this->avNumberUse;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}

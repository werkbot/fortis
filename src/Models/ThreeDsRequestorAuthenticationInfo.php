<?php

declare(strict_types=1);

/*
 * FortisAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace FortisAPILib\Models;

use FortisAPILib\ApiHelper;
use stdClass;

class ThreeDsRequestorAuthenticationInfo implements \JsonSerializable
{
    /**
     * @var string|null
     */
    private $threeDsReqAuthMethod;

    /**
     * @var string|null
     */
    private $threeDsReqAuthTimestamp;

    /**
     * @var string|null
     */
    private $threeDsReqAuthData;

    /**
     * Returns Three Ds Req Auth Method.
     * Mechanism used by the Cardholder to authenticate to the 3DS Requestor. "07" and "08" are accepted as
     * well if 3DS Server initiates authentication with EMV 3DS 2.2.0 version or greater (required protocol
     * version can be set in the preferred_protocol_version field)
     * >01 - No 3DS Requestor authentication occurred (i.e. cardholder "logged in" as guest)
     * >
     * >02 - Login to the cardholder account at the 3DS Requestor system using 3DS Requestor's own
     * credentials
     * >
     * >03 - Login to the cardholder account at the 3DS Requestor system using federated ID
     * >
     * >04 - Login to the cardholder account at the 3DS Requestor system using issuer credentials
     * >
     * >05 - Login to the cardholder account at the 3DS Requestor system using third-party authentication
     * >
     * >06 - Login to the cardholder account at the 3DS Requestor system using FIDO Authenticator
     * >
     * >07 - Login to the cardholder account at the 3DS Requestor system using FIDO Authenticator (FIDO
     * assurance data signed) (EMV 3DS 2.2.0 version or greater)
     * >
     * >08 - SRC Assurance Data (EMV 3DS 2.2.0 version or greater)
     * >
     * >80 through 99 - can be used for PS-specific values, regardless of protocol version
     * >
     */
    public function getThreeDsReqAuthMethod(): ?string
    {
        return $this->threeDsReqAuthMethod;
    }

    /**
     * Sets Three Ds Req Auth Method.
     * Mechanism used by the Cardholder to authenticate to the 3DS Requestor. "07" and "08" are accepted as
     * well if 3DS Server initiates authentication with EMV 3DS 2.2.0 version or greater (required protocol
     * version can be set in the preferred_protocol_version field)
     * >01 - No 3DS Requestor authentication occurred (i.e. cardholder "logged in" as guest)
     * >
     * >02 - Login to the cardholder account at the 3DS Requestor system using 3DS Requestor's own
     * credentials
     * >
     * >03 - Login to the cardholder account at the 3DS Requestor system using federated ID
     * >
     * >04 - Login to the cardholder account at the 3DS Requestor system using issuer credentials
     * >
     * >05 - Login to the cardholder account at the 3DS Requestor system using third-party authentication
     * >
     * >06 - Login to the cardholder account at the 3DS Requestor system using FIDO Authenticator
     * >
     * >07 - Login to the cardholder account at the 3DS Requestor system using FIDO Authenticator (FIDO
     * assurance data signed) (EMV 3DS 2.2.0 version or greater)
     * >
     * >08 - SRC Assurance Data (EMV 3DS 2.2.0 version or greater)
     * >
     * >80 through 99 - can be used for PS-specific values, regardless of protocol version
     * >
     *
     * @maps three_ds_req_auth_method
     * @factory \FortisAPILib\Models\ThreeDsReqAuthMethodEnum::checkValue
     */
    public function setThreeDsReqAuthMethod(?string $threeDsReqAuthMethod): void
    {
        $this->threeDsReqAuthMethod = $threeDsReqAuthMethod;
    }

    /**
     * Returns Three Ds Req Auth Timestamp.
     * Date and time converted into UTC of the cardholder authentication. Field is limited to 12 characters
     * and accepted format is YYYYMMDDHHMM
     */
    public function getThreeDsReqAuthTimestamp(): ?string
    {
        return $this->threeDsReqAuthTimestamp;
    }

    /**
     * Sets Three Ds Req Auth Timestamp.
     * Date and time converted into UTC of the cardholder authentication. Field is limited to 12 characters
     * and accepted format is YYYYMMDDHHMM
     *
     * @maps three_ds_req_auth_timestamp
     */
    public function setThreeDsReqAuthTimestamp(?string $threeDsReqAuthTimestamp): void
    {
        $this->threeDsReqAuthTimestamp = $threeDsReqAuthTimestamp;
    }

    /**
     * Returns Three Ds Req Auth Data.
     * Stringified array of objects that documents and supports a specific authentication process. In the
     * current version of the specification, this data element is not defined in detail, however the
     * intention is that for each 3DS Requestor Authentication Method, this field carry data that the ACS
     * can use to verify the authentication process. For example, if the 3DS
     * Requestor Authentication Method is:
     * 03 -> then this element can carry information about the provider of the federated ID and related
     * information
     * 06 -> then this element can carry the FIDO attestation data (incl. the signature)
     * 07 -> then this element can carry FIDO Attestation data with the FIDO assurance data signed.
     * 08 -> then this element can carry the SRC assurance data.
     * In versions prior to 2.3.1, this array is limited to a single object.
     * Starting from EMVCo version 2.3.1, the array may have 1-3 elements.
     *
     * This field is optional, but recommended to include.
     */
    public function getThreeDsReqAuthData(): ?string
    {
        return $this->threeDsReqAuthData;
    }

    /**
     * Sets Three Ds Req Auth Data.
     * Stringified array of objects that documents and supports a specific authentication process. In the
     * current version of the specification, this data element is not defined in detail, however the
     * intention is that for each 3DS Requestor Authentication Method, this field carry data that the ACS
     * can use to verify the authentication process. For example, if the 3DS
     * Requestor Authentication Method is:
     * 03 -> then this element can carry information about the provider of the federated ID and related
     * information
     * 06 -> then this element can carry the FIDO attestation data (incl. the signature)
     * 07 -> then this element can carry FIDO Attestation data with the FIDO assurance data signed.
     * 08 -> then this element can carry the SRC assurance data.
     * In versions prior to 2.3.1, this array is limited to a single object.
     * Starting from EMVCo version 2.3.1, the array may have 1-3 elements.
     *
     * This field is optional, but recommended to include.
     *
     * @maps three_ds_req_auth_data
     */
    public function setThreeDsReqAuthData(?string $threeDsReqAuthData): void
    {
        $this->threeDsReqAuthData = $threeDsReqAuthData;
    }

    /**
     * Converts the ThreeDsRequestorAuthenticationInfo object to a human-readable string representation.
     *
     * @return string The string representation of the ThreeDsRequestorAuthenticationInfo object.
     */
    public function __toString(): string
    {
        return ApiHelper::stringify(
            'ThreeDsRequestorAuthenticationInfo',
            [
                'threeDsReqAuthMethod' => $this->threeDsReqAuthMethod,
                'threeDsReqAuthTimestamp' => $this->threeDsReqAuthTimestamp,
                'threeDsReqAuthData' => $this->threeDsReqAuthData,
                'additionalProperties' => $this->additionalProperties
            ]
        );
    }

    private $additionalProperties = [];

    /**
     * Add an additional property to this model.
     *
     * @param string $name Name of property.
     * @param mixed $value Value of property.
     */
    public function addAdditionalProperty(string $name, $value)
    {
        $this->additionalProperties[$name] = $value;
    }

    /**
     * Find an additional property by name in this model or false if property does not exist.
     *
     * @param string $name Name of property.
     *
     * @return mixed|false Value of the property.
     */
    public function findAdditionalProperty(string $name)
    {
        if (isset($this->additionalProperties[$name])) {
            return $this->additionalProperties[$name];
        }
        return false;
    }

    /**
     * Encode this object to JSON
     *
     * @param bool $asArrayWhenEmpty Whether to serialize this model as an array whenever no fields
     *        are set. (default: false)
     *
     * @return array|stdClass
     */
    #[\ReturnTypeWillChange] // @phan-suppress-current-line PhanUndeclaredClassAttribute for (php < 8.1)
    public function jsonSerialize(bool $asArrayWhenEmpty = false)
    {
        $json = [];
        if (isset($this->threeDsReqAuthMethod)) {
            $json['three_ds_req_auth_method']    = ThreeDsReqAuthMethodEnum::checkValue($this->threeDsReqAuthMethod);
        }
        if (isset($this->threeDsReqAuthTimestamp)) {
            $json['three_ds_req_auth_timestamp'] = $this->threeDsReqAuthTimestamp;
        }
        if (isset($this->threeDsReqAuthData)) {
            $json['three_ds_req_auth_data']      = $this->threeDsReqAuthData;
        }
        $json = array_merge($json, $this->additionalProperties);

        return (!$asArrayWhenEmpty && empty($json)) ? new stdClass() : $json;
    }
}
